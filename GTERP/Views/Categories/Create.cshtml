@model GTERP.Models.Category

<style>

    #styletext {
        color: transparent;
        background: #666666;
        -webkit-background-clip: text;
        -moz-background-clip: text;
        background-clip: text;
        text-shadow: 0px 3px 3px rgba(255,255,255,0.5);
        font-weight: 100;
        font-size: 40px;
    }
</style>

<body>
    @using (Html.BeginForm("Create", "Categories", FormMethod.Post, new { id = "myForm", enctype = "multipart/form-data" }))

    {
        @Html.AntiForgeryToken()
        <div class="container" style="max-width:700px;">

            <div class="py-7 text-center">
                <h1 id="styletext">Category Information</h1>
                <p class="lead"></p>
            </div>
            <div id="modalbodyrakin" class="row card p-4">
                <div class="col-md-12 order-md-1">
                    <form class="needs-validation card p-4" novalidate>
                        <div class="row">

                            <br>
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @if (Model != null)
                            {

                                <input type="hidden" id="CategoryId" name="CategoryId" value="@Model.CategoryId" />
                                @*@Html.HiddenFor(model => model.MasterLCID)*@
                                @Html.HiddenFor(model => model.UserId)
                                @Html.HiddenFor(model => model.ComId)
                                @Html.HiddenFor(model => model.UpdateByUserId)
                                @Html.HiddenFor(model => model.DateAdded)
                                @Html.HiddenFor(model => model.DateUpdated)

                            }
                            else
                            {
                                <input type="hidden" id="comid" name="comid" value="" />
                            }

                            <div class="col-md-12 col-12">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text py-0">
                                            @Html.LabelFor(model => model.CategoryCode, htmlAttributes: new { @class = "control-label" })
                                        </span>
                                    </div>
                                    @Html.EditorFor(model => model.CategoryCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CategoryCode, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-12 col-12">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text py-0">
                                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                                        </span>
                                    </div>
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12 col-12">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text py-0">
                                            @Html.LabelFor(model => model.CategoryDescription, htmlAttributes: new { @class = "control-label" })
                                        </span>
                                    </div>
                                    @Html.EditorFor(model => model.CategoryDescription, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CategoryDescription, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12 col-12">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text py-0">
                                            @Html.LabelFor(model => model.LinkAdd, htmlAttributes: new { @class = "control-label" })
                                        </span>
                                    </div>
                                    @Html.EditorFor(model => model.LinkAdd, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LinkAdd, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <br>

                            <div class="col-md-4 offset-md-4">
                                @Html.HiddenFor(model => model.CategoryImage, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.HiddenFor(model => model.CategoryImagePath, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.HiddenFor(model => model.CategoryFileExtension, new { htmlAttributes = new { @class = "form-control" } })


                                @Html.LabelFor(model => model.CategoryImage)


                                @if (Model == null)
                                {
                                }
                                else
                                {


                                    if (Model.CategoryImage == null)
                                    {

                                        <img src="@Url.Content("uploads/" + 0 + ".png")" class="img-thumbnail" multiple />
                                    }
                                    else
                                    {
                                        <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.CategoryImage))" class="img-thumbnail">
                                    }
                                }

                                @Html.ValidationMessageFor(model => model.CategoryImage, "", new { @class = "text-danger" })
                                <input type="file" class="image-upload" name="file" id="myFile" />
                                @*<input type="hidden" id="imageDatatest" name="imageDatatest" value="data:image/jpeg;base64,....." />*@
                                <br />
                                <img src="" height="200" id='image_X' alt="Image preview...">
                                <div class="images">



                                </div>
                            </div>
                     
                        <div class="row my-2">
                            <div class="col-md-3"></div>
                            <div class="col-md-3">
                                @if (ViewBag.Title == "Create")
                                {
                                    <input type="submit" value="Create" class="btn btn-primary btn-block rounded-0" />

                                    @*<button class="btn btn-primary btn-lg btn-block" type="button" onclick="Products_save()">Save</button>*@
                                }
                                else if (ViewBag.Title == "Edit")
                                {
                                    <input type="submit" value="Update" class="btn btn-warning btn-block rounded-0" />

                                    @*<button class="btn btn-warning btn-lg btn-block" type="button" onclick="Products_save()">Update</button>*@
                                }
                                else if (ViewBag.Title == "Delete")
                                {
                                    <button class="btn btn-danger btn-lg btn-block rounded-0" type="button" onclick="Categories_delete()">Delete</button>
                                }
                            </div>
                            <div class="col-md-3">
                                @Html.ActionLink("Back", "Index", "Categories", null, new { @class = "btn btn-info btn-block rounded-0" })

                            </div>
                            <div class="col-md-3"></div>
                        </div>
                    </form>

                </div>
            </div>

        </div>
    }

    @section scripts{

        <script type="text/javascript">

     function Categories_delete() {

         var CategoryId = $("#CategoryId").val();
            $.ajax({

                url: '@Url.Action("Delete", "Categories")',
                //url: '@Url.Action("Delete")',
                data: JSON.stringify({ id: CategoryId }), //use id here
                //data: JSON.stringify(salesmain),
                type: 'POST',
                contentType: 'application/json;',
                dataType: 'json',
                success: function (result) {

                    if (result.Success == "1") {
                        window.location.href = '@Url.Action("Index", "Categories")';
                    }
                    else {
                        alert(result.ex);
                    }
                }
            });
    }


    $(document).ready(function () {






        $('#myFile').bind('change', function () {

            //this.files[0].size gets the size of your file.

            //  alert(this.files[0].size);

            var a = this.files[0].size;

            if (a >= 6000000) {
                alert('File size is too large!! \n 50 KB maximum');
                $('#myFile').val('');
                document.getElementById('image_X').src = ''

            }
            else {
                //alert('its ok');
                previewFile();

            }
        });

        function previewFile() {
            var preview = document.querySelector('#image_X'); //selects the query named img
            var file = document.querySelector('input[type=file]').files[0]; //sames as here

            var reader = new FileReader();


            reader.onloadend = function () {
                preview.src = reader.result;
            }

            if (file) {
                reader.readAsDataURL(file); //reads the data as a URL
            } else {
                preview.src = "";
            }
        }

        })

        </script>

    }
</body>