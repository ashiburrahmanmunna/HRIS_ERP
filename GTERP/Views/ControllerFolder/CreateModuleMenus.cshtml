@model GTERP.Models.ModuleMenu
@*@{
        Module_Menu_Action Ma = ViewBag.ModuleMenuAction;
    }*@
<style>


    #styletext {
        color: transparent;
        background: #666666;
        -webkit-background-clip: text;
        -moz-background-clip: text;
        background-clip: text;
        text-shadow: 0px 3px 3px rgba(255,255,255,0.5);
        font-weight: 100;
        font-size: 40px;
    }
</style>


<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
</head>

@using (Html.BeginForm("CreateModuleMenus", "ControllerFolder", FormMethod.Post, new { enctype = "multipart/form-data" }))

{
    @*@Html.AntiForgeryToken()*@

    <div class="container-fluid">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (Model != null)
        {

            <input type="hidden" id="ModuleMenuId" name="ModuleMenuId" value="@Model.ModuleMenuId" />
        }
        else
        {
            <input type="hidden" id="comid" name="comid" value="" />
        }


        <div id="modalbodyfahad" class="row">
            <div class="col-md-8 offset-md-2 col-12 order-md-1">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-center" id="styletext">Module Menu Entry - @ViewBag.Title </h4>
                    </div>
                    <div class="card-body">
                        <div class="needs-validation" novalidate>
                            <div class="row">
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ModuleMenuName)
                                            </span>
                                        </div>
                                        @Html.EditorFor(model => model.ModuleMenuName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModuleMenuName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ModuleMenuCaption)
                                            </span>
                                        </div>
                                        @Html.EditorFor(model => model.ModuleMenuCaption, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModuleMenuCaption, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ModuleId, "Module")
                                            </span>
                                        </div>
                                        @Html.DropDownList("ModuleId", null, "=N/A=", htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ModuleId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @if (Model == null)
                                {
                                    <div class="col-md-6 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleGroupId, "Module Group")
                                                </span>
                                            </div>
                                            @*@Html.DropDownList("ModuleGroupId", Enumerable.Empty<SelectListItem>(), "Select Module Group", new { @class = "form-control" })*@
                                            @Html.DropDownList("ModuleGroupId", null, "=N/A=", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ModuleGroupId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-6 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ParentId, "Parent Menu")
                                                </span>
                                            </div>
                                            @Html.DropDownListFor(model => model.ParentId, new List<SelectListItem> { new SelectListItem { Text = "=N/A=", Value = "0" } }, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.isParent, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-6 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleGroupId, "Module Group")
                                                </span>
                                            </div>
                                            @*@Html.DropDownList("ModuleGroupId", Enumerable.Empty<SelectListItem>(), "Select Module Group", new { @class = "form-control" })*@
                                            @Html.DropDownList("ModuleGroupId", null, "=N/A=", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ModuleGroupId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-6 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ParentId, "Parent Menu")
                                                </span>
                                            </div>
                                            @*@Html.DropDownListFor(model => model.ParentId, new List<SelectListItem> { new SelectListItem{Text="=N/A=", Value="0"}}, new { @class = "form-control" })*@
                                            @Html.DropDownList("ParentId", null, "=N/A=", htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                }


                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.SLNo)
                                            </span>
                                        </div>
                                        @Html.EditorFor(model => model.SLNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.SLNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.isInactive, "Is InActive")
                                            </span>
                                        </div>
                                        @Html.DropDownListFor(model => model.isInactive, new List<SelectListItem> { new SelectListItem { Text = "Active", Value = "0" }, new SelectListItem { Text = "Deactive", Value = "1" } }, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.isInactive, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.isParent, "Is Parent")
                                            </span>
                                        </div>
                                        @Html.DropDownListFor(model => model.isParent, new List<SelectListItem> { new SelectListItem { Text = "No", Value = "0" }, new SelectListItem { Text = "Yes", Value = "1" } }, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.isParent, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ModuleMenuClass)
                                            </span>
                                        </div>
                                        <input asp-for="ModuleMenuClass" class="form-control" />
                                        @Html.ValidationMessageFor(model => model.isParent, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ImageCriteriaId, "Image Criteria")
                                            </span>
                                        </div>
                                        @Html.DropDownList("ImageCriteriaId", null, htmlAttributes: new { @class = "form-control" })

                                        @*@Html.DropDownListFor(model => model.ImageCriteriaId, new List<SelectListItem>
                                            { new SelectListItem{Text="Image", Value="1"},
                                              new SelectListItem{Text="Icon", Value="2"}}, new { @class = "form-control" })*@
                                        @Html.ValidationMessageFor(model => model.ImageCriteriaId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ModuleMenuController)
                                            </span>
                                        </div>
                                        @Html.EditorFor(model => model.ModuleMenuController, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModuleMenuController, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.ModuleMenuLink)
                                            </span>
                                        </div>
                                        @Html.EditorFor(model => model.ModuleMenuLink, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModuleMenuLink, "", new { @class = "text-danger" })
                                    </div>
                                </div>                                
                                <div class="col-md-6 col-12">
                                    <div class="input-group mb-2">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text py-0">
                                                @Html.LabelFor(model => model.isCertificate, "Is Certificate")
                                            </span>
                                        </div>
                                        <span class="input-group-text"><input asp-for="isCertificate" /></span>
                                    </div>
                                </div>
                            </div>


                            <div class="d-block mx-auto">
                                <div class="col-md-4 offset-md-2">
                                    @Html.HiddenFor(model => model.ModuleMenuImage, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.HiddenFor(model => model.ModuleImagePath, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.HiddenFor(model => model.ModuleImageExtension, new { htmlAttributes = new { @class = "form-control" } })


                                    @Html.LabelFor(model => model.ModuleMenuImage)


                                    @if (Model == null)
                                    {
                                    }
                                    else
                                    {


                                        if (Model.ModuleMenuImage == null)
                                        {

                                            <img src="@Url.Content("uploads/" + 0 + ".png")" class="img-thumbnail" multiple />
                                        }
                                        else
                                        {
                                            <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.ModuleMenuImage))" class="img-thumbnail">
                                        }
                                    }

                                    @Html.ValidationMessageFor(model => model.ModuleMenuImage, "", new { @class = "text-danger" })
                                    <input type="file" class="image-upload" name="file" id="myFile" />
                                    @*<input type="hidden" id="imageDatatest" name="imageDatatest" value="data:image/jpeg;base64,....." />*@
                                    <br />
                                    <img src="" height="200" id='image_X' alt="Image preview...">
                                    <div class="images">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="row">
                            <div class="col-md-2"></div>
                            <div class="col-md-4 col-12">
                                @if (ViewBag.Title == "Create")
                                {
                                    <input type="submit"  value="Create" class="btn btn-primary btn-block rounded-0" />

                                    @*<button class="btn btn-primary btn-lg btn-block" type="button" onclick="Products_save()">Save</button>*@
                                }
                                else if (ViewBag.Title == "Edit")
                                {
                                    <input type="submit" value="Update" class="btn btn-warning btn-block rounded-0" />

                                    @*<button class="btn btn-warning btn-lg btn-block" type="button" onclick="Products_save()">Update</button>*@
                                }
                                else if (ViewBag.Title == "Delete")
                                {
                                    <button class="btn btn-danger rounded-0 btn-block" type="button" onclick="ModuleMenu_delete()">Delete</button>
                                }
                            </div>
                            <div class="col-md-4 col-12">
                                @Html.ActionLink("Back", "ModuleMenusList", "ControllerFolder", null, new { @class = "btn btn-info btn-block rounded-0" })
                            </div>
                            <div class="col-md-2">
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            
           
        </div>
    </div>
}


@section Scripts{

    <script type="text/javascript">



         function ModuleMenu_delete() {
                var ModuleMenuId = $("#ModuleMenuId").val();
                //alert(SalesId);
                $.ajax({

                    url: '@Url.Action("DeleteModuleMenus", "ControllerFolder")',
                    //url: '@Url.Action("Delete")',
                    data: JSON.stringify({ id: ModuleMenuId }), //use id here
                    //data: JSON.stringify(salesmain),
                    type: 'POST',
                    contentType: 'application/json;',
                    dataType: 'json',
                    success: function (result) {

                        if (result.Success == "1") {
                            window.location.href = '@Url.Action("ModuleMenusList", "ControllerFolder")';
                        }
                        else {
                            alert(result.ex);
                        }
                    }
                });
        }


        $(document).ready(function () {



              function LoadModuleGroup() {

                //alert('prdsearch');
                  $("#ModuleGroupId").empty();
                //$("#ProductDescription").val("=N/A=");
                //$("#Qty").val(1);


                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetModuleGroup", "ControllerFolder")',
                        dataType: 'json',
                        async: false,
                        data: { id: $("#ModuleId").val() },
                        success: function (data) {
                            var s ='<option value="-1">Please Select Module Group</option>';
                            //$.each(data, function (i, data) {
                            //    $("#Product").append('<option value="'+ data.Value + '">'
                            //        + data.Text + '</option>');
                            //});
                            for (var i = 0; i < data.length; i++) {
                                s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                            }
                            $("#ModuleGroupId").html(s);
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }

                    });
                    return false;
                };


            $('#ModuleId').select2({})
                .on("select2:select", function (e) {
                    if ($('#ModuleId').val() > 0) {

                        //alert('enter');
                        LoadModuleGroup();
                    }
                    else {
                        alert('Please Select Module Information First.')
                    }

                    console.log("select2:select")
                });




            @*$('#ModuleId').change(function () {
                //alert($('#ModuleId').val());
                var ModuleId = $("#ModuleId").val();
                //alert(SalesId);
                $.ajax({

                    //url: '@Url.Action("GetModuleGroup", "ModuleMenus")',
                    url: `/ModuleMenus/GetModuleGroup?handler=document&id=${ModuleId}`,
                    //url: '@Url.Action("Delete")',
                    //data: JSON.stringify({ id: ModuleId }), //use id here
                    //data: JSON.stringify(salesmain),
                    type: 'POST',
                    contentType: 'application/json;',
                    dataType: 'json',
                    success: function (result) {
                        $('#ModuleGroupId').empty();
                        $('#ModuleGroupId').append(`<option value=0>Select Module Group</option>`);
                        for (var i = 0; i < result.length; i++) {
                            $('#ModuleGroupId').append(`<option value=${result[i].ModuleGroupId}>${result[i].ModuleGroupName}</option>`);
                        }
                    }
                });
            });*@



            //$.ajax({
            //       type: "POST",
            //        //url: "/JobCard/GetJobCard",
            //        url: `/JobCard/GetJobCard?handler=document&fromDate=${fTime}&toDate=${tTime}`,
            //        //data: JSON.stringify(data),
            //       contentType: 'application/json; charset=utf-8',
            //       dataType: "json",
            //        success: function (data) {

            //       }
            //    });



            $('#ModuleGroupId').select2({})
                .on("select2:select", function (e) {
                    if ($('#ModuleGroupId').val() > 0) {

                        //alert('enter');
                        CascadeParentMenu();
                    }
                    else {
                        alert('Please Select Module Group Information First.')
                    }

                    console.log("select2:select")
                });


                $("#ParentId").select2();

               function CascadeParentMenu() {

                //alert('prdsearch');
                   $("#ParentId").empty();
                //$("#ProductDescription").val("=N/A=");
                //$("#Qty").val(1);


                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetModuleMenu", "ControllerFolder")',
                        dataType: 'json',
                        async: false,
                        data: { id: $("#ModuleGroupId").val() },
                        success: function (data) {
                            var s ='<option value="-1">Please Select Parent Menu</option>';
                            //$.each(data, function (i, data) {
                            //    $("#Product").append('<option value="'+ data.Value + '">'
                            //        + data.Text + '</option>');
                            //});
                            for (var i = 0; i < data.length; i++) {
                                s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                            }
                            $("#ParentId").html(s);
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }

                    });
                    return false;
                };










            //@*$('#ModuleGroupId').change(function () {
            //    //alert($('#ModuleId').val());
            //    var ModuleGroupId = $("#ModuleGroupId").val();
            //    //alert(SalesId);

            //    $.ajax({

            //        //url: '@Url.Action("GetModuleMenu", "ModuleMenus")',
                    ////url: `/ModuleMenus/GetModuleMenu?handler=document&id=${ModuleGroupId}`,
                    //data: JSON.stringify({ id: ModuleGroupId }), //use id here
                    ////data: JSON.stringify(salesmain),
                    //type: 'POST',
                    //contentType: 'application/json;',
                    //dataType: 'json',
                    //success: function (result) {
                    //    $('#ParentId').empty();
                    //    $('#ParentId').append(`<option value=0>=N/A=</option>`);
                    //    for (var i = 0; i < result.length; i++) {
                    //        $('#ParentId').append(`<option value=${result[i].ModuleMenuId}>${result[i].ModuleMenuName}</option>`);
                    //    }

                    //    if (result.Success == "1") {
            //        //        window.location.href = '@Url.Action("Index", "ModuleMenus")';
            //            }
            //            else {
            //                alert(result.ex);
            //            }
            //        }
            //    });
            //});*@

            $('#myFile').bind('change', function () {

                //this.files[0].size gets the size of your file.

                //  alert(this.files[0].size);

                var a = this.files[0].size;

                if (a >= 6000000) {
                    alert('File size is too large!! \n 50 KB maximum');
                    $('#myFile').val('');
                    document.getElementById('image_X').src = ''

                }
                else {
                    //alert('its ok');
                    previewFile();

                }
            });

        function previewFile() {
            var preview = document.querySelector('#image_X'); //selects the query named img
            var file = document.querySelector('input[type=file]').files[0]; //sames as here

            var reader = new FileReader();


            reader.onloadend = function () {
                preview.src = reader.result;
            }

            if (file) {
                reader.readAsDataURL(file); //reads the data as a URL
            } else {
                preview.src = "";
            }
        }

        })

    </script>

}

@*</body>*@


