@model GTERP.Models.Module
@*<script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>*@



<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="canonical" href="https://getbootstrap.com/docs/4.0/examples/checkout/">
</head>

<body>
    @using (Html.BeginForm("CreateModules", "ControllerFolder", FormMethod.Post, new { enctype = "multipart/form-data" }))

    {
        @*@Html.AntiForgeryToken()*@
        @*<h2>Create</h2>*@

        <div class="container">

            <div class="text-center">
                @*<img class="d-block mx-auto mb-4" src="https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg" alt="" width="72" height="72">*@
                <h2>Module Entry</h2>
            </div>
            <div id="modalbodyrakin" class="row ">
                <div class="col-md-8 offset-md-2 col-12 order-md-1">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="text-center">Module Information</h4>
                        </div>
                        <div class="card-body">
                            <form class="needs-validation card p-4" novalidate>
                                <div class="row">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @if (Model != null)
                                    {

                                        <input type="hidden" id="ModuleId" name="ModuleId" value="@Model.ModuleId" />
                                    }
                                    else
                                    {
                                        <input type="hidden" id="comid" name="comid" value="" />
                                    }

                                    <div class="col-md-12 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleCode, htmlAttributes: new { @class = "control-label" })
                                                </span>
                                            </div>
                                            @Html.EditorFor(model => model.ModuleCode, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ModuleCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-12 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleName, htmlAttributes: new { @class = "control-label" })
                                                </span>
                                            </div>
                                            @Html.EditorFor(model => model.ModuleName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ModuleName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-12 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleCaption, htmlAttributes: new { @class = "control-label" })
                                                </span>
                                            </div>
                                            @Html.EditorFor(model => model.ModuleCaption, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ModuleCaption, "", new { @class = "text-danger" })
                                        </div>


                                    </div>
                                    <div class="col-md-12 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleDescription, htmlAttributes: new { @class = "control-label" })
                                                </span>
                                            </div>
                                            @Html.EditorFor(model => model.ModuleDescription, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ModuleDescription, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-8 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.ModuleLink, htmlAttributes: new { @class = "control-label" })
                                                </span>
                                            </div>
                                            @Html.EditorFor(model => model.ModuleLink, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.ModuleLink, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-md-4 col-12">
                                        <div class="input-group mb-2">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text py-0">
                                                    @Html.LabelFor(model => model.SLNo, htmlAttributes: new { @class = "control-label" })

                                                </span>
                                            </div>
                                            @Html.EditorFor(model => model.SLNo, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.SLNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <br>

                                <div class="row">
                                    <div class="col-md-4 offset-md-2 col-12">
                                        @Html.HiddenFor(model => model.ModuleImage, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.HiddenFor(model => model.ModuleImagePath, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.HiddenFor(model => model.ModuleImageExtension, new { htmlAttributes = new { @class = "form-control" } })


                                        @Html.LabelFor(model => model.ModuleImage)


                                        @if (Model == null)
                                        {
                                        }
                                        else
                                        {
                                            if (Model.ModuleImage == null)
                                            {

                                                <img src="@Url.Content("uploads/" + 0 + ".png")" class="img-thumbnail" multiple />
                                            }
                                            else
                                            {
                                                <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.ModuleImage))" class="img-thumbnail">
                                            }
                                        }

                                        @Html.ValidationMessageFor(model => model.ModuleImage, "", new { @class = "text-danger" })
                                        <input type="file" class="image-upload" name="file" id="myFile" />
                                        @*<input type="hidden" id="imageDatatest" name="imageDatatest" value="data:image/jpeg;base64,....." />*@
                                        
                                        <div class="my-2">
                                            <img src="" height="200" id='image_X' alt="Image preview...">
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-4 col-12 ">
                                        @if (ViewBag.Title == "Create")
                                        {
                                            <input type="submit" value="Create" class="btn btn-primary btn-block rounded-0" />
                                        }
                                        else if (ViewBag.Title == "Edit")
                                        {
                                            <input type="submit" value="Update" class="btn btn-warning btn-block rounded-0" />
                                        }
                                        else if (ViewBag.Title == "Delete")
                                        { 
                                            <button class="btn btn-danger btn-block rounded-0" type="button" onclick="Modules_delete()">Delete</button>
                                        }
                                    </div>
                                    <div class="col-md-4 col-12 ">
                                        @Html.ActionLink("Back", "ModulesList", "ControllerFolder", null, new { @class = "btn btn-info btn-block rounded-0" })
                                    </div>
                                    <div class="col-md-2"></div>
                                </div>
                            </form>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    }

    @section Scripts{

        <script type="text/javascript">

     function Modules_delete() {

         var ModuleId = $("#ModuleId").val();
            $.ajax({

                url: '@Url.Action("DeleteModules", "ControllerFolder")',
                //url: '@Url.Action("Delete")',
                data: JSON.stringify({ id: ModuleId }), //use id here
                //data: JSON.stringify(salesmain),
                type: 'POST',
                contentType: 'application/json;',
                dataType: 'json',
                success: function (result) {

                    if (result.Success == "1") {
                        window.location.href = '@Url.Action("ModulesList", "ControllerFolder")';
                    }
                    else {
                        alert(result.ex);
                    }
                }
            });
    }


    $(document).ready(function () {

        $('#myFile').bind('change', function () {

            //this.files[0].size gets the size of your file.

            //  alert(this.files[0].size);

            var a = this.files[0].size;

            if (a >= 6000000) {
                alert('File size is too large!! \n 50 KB maximum');
                $('#myFile').val('');
                document.getElementById('image_X').src = ''

            }
            else {
                //alert('its ok');
                previewFile();

            }
        });

        function previewFile() {
            var preview = document.querySelector('#image_X'); //selects the query named img
            var file = document.querySelector('input[type=file]').files[0]; //sames as here

            var reader = new FileReader();


            reader.onloadend = function () {
                preview.src = reader.result;
            }

            if (file) {
                reader.readAsDataURL(file); //reads the data as a URL
            } else {
                preview.src = "";
            }
        }

        })

        </script>

    }




</body>