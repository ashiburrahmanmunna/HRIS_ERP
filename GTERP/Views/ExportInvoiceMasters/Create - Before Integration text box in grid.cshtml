@model GTERP.Models.ExportInvoiceMaster

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">


    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/DataTables/jquery.dataTables.min.js"></script>
    @*<link href="~/Content/DataTables/css/jquery.dataTables.css" rel="stylesheet" />*@
    <script src="~/Scripts/DataTables/dataTables.bootstrap4.js"></script>
    <link href="~/Content/DataTables/css/dataTables.bootstrap4.css" rel="stylesheet" />
    @*<script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>*@

    <link href="~/Content/css/select2.min.css" rel="stylesheet" />
    <script src="~/Scripts/select2.min.js"></script>
    <link href="~/Content/DataTables/css/select.bootstrap4.min.css" rel="stylesheet" />
    <script src="~/Scripts/dataTables.cellEdit.js"></script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
    <link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script src="~/Scripts/DataTables/dataTables.select.min.js"></script>
    <link href="~/Content/DataTables/css/select.dataTables.min.css" rel="stylesheet" />
    <script src="~/Scripts/DataTables/dataTables.buttons.min.js"></script>
    <link href="~/Content/DataTables/css/buttons.dataTables.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

</head>

<style>
    .input-validation-error {
        border: 2px solid #f00;
        background: #fee;
    }

    #styletext {
        color: transparent;
        background: #666666;
        -webkit-background-clip: text;
        -moz-background-clip: text;
        background-clip: text;
        text-shadow: 0px 3px 3px rgba(255,255,255,0.5);
        font-weight: 100;
        font-size: 40px;
    }


    th {
        font-size: 11px;
    }

    td {
        font-size: 11px;
    }


    div.dataTables_length {
        float: right;
    }
    /*.dt-buttons {

        }*/
    /*div.dataTables_length select {
            font-size:17px;

        }*/
    /*div.dataTables_length> label {
            display: none;
        }*/
    div.dataTables_filter {
        float: left;
        /*font-size: 17px;*/
    }

    div.dt-buttons {
        float: right;
        font-size: 12px !important;
    }
    /*div.dataTables_info {
            float: left;
        }*/

    div.dataTables_paginate {
        float: right;
    }

    div.DTTT {
        float: left;
        margin-right: 50px;
    }

    div.buttons {
        clear: both;
    }

    .fas, .far {
        font-size: 10px !important;
    }


    table.dataTable tbody td, .sorting {
        vertical-align: middle;
        text-align: center;
    }

    .sorting_asc {
        color: green;
        vertical-align: middle;
        text-align: center;
        font-style: oblique;
    }

    .sorting_desc {
        color: #0932d1;
        vertical-align: middle;
        text-align: center;
        font-style: oblique;
    }

    .table-sm th {
        padding: .8em;
        background: rgb(192,196,196);
        background: linear-gradient(0deg, rgba(192,196,196,0.6224556717218137) 1%, rgba(255,255,255,0.6224556717218137) 65%, rgba(151,149,162,0.2527077725621498) 100%);
        font-family: 'Roboto Condensed', sans-serif;
        font-weight: 500;
        font-size: 15px;
    }

    .table-hover tbody tr:hover td, .table-hover tbody tr:hover th {
        background: linear-gradient(0deg, rgba(192,196,196,0.6224556717218137) 1%, rgba(255,255,255,0.6224556717218137) 65%, rgba(151,149,162,0.2527077725621498) 100%);
    }

    table.dataTable tbody tr.selected, table.dataTable tbody th.selected, table.dataTable tbody td.selected {
        color: green;
    }

    .txtMultbblc.selected {
        background: linear-gradient(0deg, rgba(86, 230, 56, 0.38) 1%, rgba(220, 255, 192, 0.59) 66%, rgba(160, 235, 157, 0.55) 100%);
        font-weight: bolder;
        /*color: #006100;
        background: rgb(18,180,77);
        background: linear-gradient(0deg, rgba(18,180,77,0.2246965680803571) 1%, rgba(255,255,255,0.6224556717218137) 66%, rgba(6,139,2,0.07343606387867652) 100%);
        font-weight: bolder;*/
    }

    .txtMultmasterlcdetails.selected {
        background: linear-gradient(0deg, rgba(86, 230, 56, 0.38) 1%, rgba(220, 255, 192, 0.59) 66%, rgba(160, 235, 157, 0.55) 100%);
        font-weight: bolder;
        /*color: orangered;
        background: rgb(18,180,77);
        background: linear-gradient(0deg, rgba(18,180,77,0.2246965680803571) 1%, rgba(255,255,255,0.6224556717218137) 66%, rgba(6,139,2,0.07343606387867652) 100%);
        font-weight: bolder;*/
    }


    .select-box {
        position: relative;
        display: block;
        width: 100%;
        margin: 0 auto;
        font-family: 'Open Sans', 'Helvetica Neue', 'Segoe UI', 'Calibri', 'Arial', sans-serif;
        font-size: 18px;
        color: #60666d;
    }

    #myInputSearch {
        background-image: url('../../Content/css/searchicon.png');
        background-position: 10px 12px;
        background-repeat: no-repeat;
        width: 100%;
        padding: 12px 20px 12px 40px;
        border: 1px solid #ddd;
        text-align: center;
        font-size: 22px;
        margin-bottom: 12px;
    }


    div#DataTables_Table_0_wrapper {
        width: 100% !important;
    }
</style>

<h2 id="styletext" class="text-center">Export Invoice @ViewBag.Title</h2>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "myform" }))
{

    <div class="needs-validation" novalidate>
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*style="min-width: 1300px;"*@
        <div class="container-fluid">
            <div id="modalbodyfahad" class="row">

                <div class="col-md-12 order-md-1 mb-2">

                    @**@
                    <div class="card p-4">
                        <table class="table table-condensed">
                            <tr class="row">

                                <td id="divstyle" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Master LC/ Contact No:</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.HiddenFor(model => model.InvoiceId)

                                        @Html.HiddenFor(model => model.UserId)
                                        @Html.HiddenFor(model => model.UpdateByUserId)
                                        @Html.HiddenFor(model => model.DateAdded)
                                        @Html.HiddenFor(model => model.DateUpdated)



                                        @Html.DropDownListFor(model => model.MasterLCId, ViewBag.MasterLCID as List<SelectListItem>, "--Please Select From List--", new { htmlAttributes = new { id = "MasterLCID", @class = "form-control form-control-sm custom-select" } })
                                        <span class="input-group-append">
                                            <button id="btnmusterlcid" class="btn btn-danger" type="button" style="font-size: 0.5rem;" onclick="MusterLCId_load()">Load</button>
                                        </span>
                                        @Html.ValidationMessageFor(model => model.MasterLCId)
                                    </span>

                                </td>
                                <td id="divSupplier" class="col-md-2 col-12">
                                    <span class="text-right"><label>Buyer Group:</label></span>
                                    <span class="input-group">
                                        @Html.DropDownList("BuyerGroupId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })
                                        @*@Html.EditorFor(m => m.COM_MasterLC.BuyerInformations.BuyerName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>

                                </td>
                                <td id="divstyle" class="col-md-2 col-12">

                                    <label>Final Destination:</label>

                                    <div class="input-group">

                                        @Html.DropDownList("DestinationId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })


                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#finalDestinationModal"><i class="fa fa-plus"></i></button>
                                        </div>



                                    </div>



                                </td>
                                <td id="divSupplier" class="col-md-2 col-12">
                                    <span class="text-right"><label>Buyer :</label></span>
                                    <span class="input-group">
                                        @Html.DropDownList("BuyerId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })
                                        @*@Html.EditorFor(m => m.COM_MasterLC.BuyerInformations.BuyerName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>

                                </td>

                                <td id="divNotifyPartyOne" class="col-md-2 col-12">
                                    <label>1st Notify Party :</label>

                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.FirstNotifyPartyId, ViewBag.FirstNotifyPartyId as List<SelectListItem>, "--Please Select--", new { @class = "form-control select", @id = "FirstNotifyPartyId" })


                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#notifyPartyModal"><i class="fa fa-plus"></i></button>
                                        </div>
                                    </div>



                                </td>

                                <td id="divNotifyPartyTwo" class="col-md-2 col-12">
                                    <label>2nd Notify Party :</label>

                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.SecoundNotifyPartyId, ViewBag.SecoundNotifyPartyId as List<SelectListItem>, "--Please Select--", new { @class = "form-control select", @id = "SecoundNotifyPartyId" })


                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#notifyPartyModal"><i class="fa fa-plus"></i></button>
                                        </div>
                                    </div>



                                </td>



                                <td id="divNotifyPartyThree" class="col-md-2 col-12">
                                    <label>3rd Notify Party :</label>

                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.ThirdNotifyPartyId, ViewBag.ThirdNotifyPartyId as List<SelectListItem>, "--Please Select--", new { @class = "form-control select", @id = "ThirdNotifyPartyId" })


                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#notifyPartyModal"><i class="fa fa-plus"></i></button>
                                        </div>
                                    </div>



                                </td>


                                <td id="divSupplier" class="col-md-2 col-12">
                                    <span class="text-right"><label>Exporter :</label></span>

                                    <span class="input-group">
                                        @Html.DropDownList("CommercialCompanyId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })

                                        @*                                        @Html.EditorFor(m => m.COM_MasterLC.CommercialCompanies.CompanyName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>
                                </td>
                                <td id="divManufacture" class="col-md-2 col-12">
                                    <span class="text-right"><label>Manufacture :</label></span>

                                    <span class="input-group">
                                        @Html.DropDownList("ManufactureId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })

                                        @*                                        @Html.EditorFor(m => m.COM_MasterLC.CommercialCompanies.CompanyName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>
                                </td>
                                <td id="divstyle" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>ShipMode:</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.DropDownList("ShipModeId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })

                                        @*@Html.EditorFor(m => m.ShipMode.ShipModeName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>

                                </td>

                                <td id="divstyle" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Invoice Ref No:</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(m => m.InvoiceNo, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.InvoiceNo)

                                </td>

                                <td id="divstyle" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Date:</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(m => m.InvoiceDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                        @Html.ValidationMessageFor(model => model.InvoiceDate)
                                    </span>
                                </td>



                                <td id="divSupplier" class="col-md-2 col-12">
                                    <span class="text-right"><label>Cond. Of Sales :</label></span>
                                    <span class="input-group">
                                        @Html.DropDownList("TradeTermId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })
                                        @*@Html.EditorFor(m => m.COM_MasterLC.BuyerInformations.BuyerName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>

                                </td>





                                <td id="divSupplier" class="col-md-2 col-12">
                                    <label>Port of Loading :</label>

                                    <div class="input-group">
                                        @Html.DropDownList("PortOfLoadingId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })

                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#portOfLoadingModal"><i class="fa fa-plus"></i></button>

                                        </div>
                                    </div>


                                </td>


                                <td id="divPortOfDischarge" class="col-md-2 col-12">
                                    <label>Port of Discharge :</label>

                                    <div class="input-group">
                                        @Html.DropDownList("PortOfDischargeId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })


                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#portOfDischargeModal"><i class="fa fa-plus"></i></button>
                                        </div>


                                    </div>

                                </td>



                                @*<td id="divinsurance" class="col-md-2 col-12">
            <span class="text-right">
                <label>Delivery Term :</label>
            </span>
            <span class="input-group"  >
                @Html.EditorFor(model => model.DeliveryTerm, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })
            </span>
        </td>*@

                                <td id="divlcexpirydate" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Forwarder :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.DropDownList("SupplierId", null, htmlAttributes: new { @class = "form-control form-control-sm custom-select" })

                                        @*@Html.EditorFor(model => model.SupplierInformation.SupplierName, new { htmlAttributes = new { @class = "form-control form-control-sm custom-select" } })*@
                                    </span>
                                    @Html.ValidationMessageFor(model => model.SupplierInformation.SupplierName)
                                </td>


                                <td id="divTenor" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label> Exfactory Date:</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.ExfactoryDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.ExfactoryDate)

                                </td>

                                <td id="divstyle" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Onboard Date :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.OnboardDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.OnboardDate)
                                </td>

                                <td id="divinsurance" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Exp No :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.ExpNo, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.ExpNo)
                                </td>
                                <td id="divstyle" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Exp Date:</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.ExpDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.ExpDate)
                                </td>


                                <td id="divtotallcqty" class="col-md-2 col-12">
                                    <span class="text-right"><label>Total LC Qty:</label></span>
                                    <span class="input-group">
                                        @Html.Editor("TotalLCQty", "", new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.COM_MasterLC.TotalLCQty)
                                </td>

                                <td id="divVessel" class="col-md-2 col-12">
                                    <span class="text-right"><label>Vessel Name :</label></span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.VesselName, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.VesselName)
                                </td>
                                <td id="divVoyage" class="col-md-2 col-12">
                                    <span class="text-right"><label>Voyage No :</label></span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.VoyageNo, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.VoyageNo)
                                </td>


                                <td id="divdestination" class="col-md-2 col-12">
                                    <span class="text-right"><label>BL No :</label></span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.BLNo, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.BLNo)
                                </td>
                                <td id="divbldate" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>BL Date :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.BLDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.BLDate)
                                </td>

                                <td id="divdestination" class="col-md-2 col-12">
                                    <span class="text-right"><label>Booking No :</label></span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.BookingNo, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.BookingNo)
                                </td>
                                <td id="divbldate" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Booking Date :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.BookingDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.BookingDate)
                                </td>




                                <td id="divbalance" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Total Shipped :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.TotalShipped, new { htmlAttributes = new { @class = "form-control form-control-sm", @readonly = "readonly" } })
                                    </span>

                                </td>



                                <td id="divTotalCartonQty" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Number of Carton</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.TotalCartonQty, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.TotalCartonQty)
                                </td>
                                <td id="divudno" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Balance Ship :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.BalanceShip, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                </td>






                                <td id="divmainmark" class="col-md-4 col-12">
                                    <span class="text-right">
                                        <label>Main Mark</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.MainMark, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.MainMark)
                                </td>
                                <td id="divNetWeight" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Net Weight</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.NetWeight, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.NetWeight)
                                </td>
                                <td id="divGrossWeight" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Gross Weight</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.GrossWeight, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.GrossWeight)
                                </td>


                                <td id="divCBM" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>CBM</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.CBM, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.CBM)
                                </td>




                                <td id="divPackingType" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Packing Type</label>
                                    </span>
                                    <span class="input-group">
                                        <select id="PackingType" class="form-control form-control-sm custom-select" s>
                                            <option>=N/A=</option>
                                            <option>SOLID</option>
                                            <option>ASSORTED</option>

                                        </select>
                                    </span>

                                </td>



                                <td id="divuddateg" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Total Invoice Qty</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.TotalInvoiceQty, new { htmlAttributes = new { @class = "form-control form-control-sm", @readonly = "readonly" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.TotalInvoiceQty)
                                </td>
                                <td id="divuddateg" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Rate</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control form-control-sm", @readonly = "readonly" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.Rate)
                                </td>
                                <td id="divuddateg" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Value</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.TotalValue, new { htmlAttributes = new { @class = "form-control form-control-sm", @readonly = "readonly" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.TotalValue)
                                </td>

                                <td id="divshipmentauthorization" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Shipment Authorization</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.ShipmentAuthorization, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.ShipmentAuthorization)
                                </td>
                                <td id="divcartonmeasurement" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Carton Measurement</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.CartonMeasurement, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.CartonMeasurement)
                                </td>
                                <td id="divgrouplcavg" class="col-md-2 col-12">
                                    <span class="text-right">
                                        <label>Goods Description :</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.GoodsDescription, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.GoodsDescription)
                                </td>
                                <td id="divRemarks" class="col-md-3 col-12">
                                    <span class="text-right">
                                        <label>Remarks</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.Remarks)
                                </td>
                                <td id="divDiscount" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>Discount %</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.Discount)
                                </td>
                                <td id="divCMP" class="col-md-1 col-12">
                                    <span class="text-right">
                                        <label>CMP %</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.CMPPercentage, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.CMPPercentage)
                                </td>
                                <td id="divCargoHandover" class="col-md-2 col-12">

                                    <span class="text-right">
                                        <label>Cargo Handover Date</label>
                                    </span>
                                    <span class="input-group">
                                        @Html.EditorFor(model => model.CargoHandoverDate, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
                                    </span>
                                    @Html.ValidationMessageFor(model => model.CargoHandoverDate)

                                </td>



                            </tr>


                        </table>
                    </div>
                </div>
                <div class="col-md-12 order-md-1 mb-2">
                    <div class="card p-1">
                        <div class="table-responsive text-nowrap">

                            <table id="tblexportordermain" class="tblexportordermain display nowrap table-bordered table-sm table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Com. Invoice No [Exp.]</th>
                                        <th>Invoice Date</th>
                                        <th>Total Invoice Qty</th>
                                        <th>Total Value</th>
                                        <th>Report</th>

                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var item in ViewBag.ExportDetails)
                                    {
                                        <tr class="txtMultExportInvoiceMaster">
                                            <td>
                                                @item.InvoiceNo
                                            </td>
                                            <td>
                                                @item.InvoiceDate
                                            </td>
                                            <td>
                                                @item.TotalInvoiceQty
                                            </td>
                                            <td>
                                                @item.TotalValue
                                            </td>

                                            @*@Convert.ToString(string.Format("{0:dd-MMM-yy}", @item.LastShipDate))*@
                                            @*@item.LastShipDate.ToString("dd-MMM-yy")*@

                                            <td>

                                                <span data-toggle="tooltip" title="Print">
                                                    @Html.ActionLink(" ", "PrintBL", new { Id = item.InvNo, type = "pdf" }, new { @target = "_blank", @class = "far fa-file-pdf btn btn-outline-success btn-xs" })

                                                </span>
                                            </td>



                                        </tr>

                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td class="text-right" colspan="2">
                                            <h6>Total Shipped Qty & Value :</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlorderqtymaster">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlordervaluemaster">0.00</h6>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-md-12 order-md-2 mb-2">
                    <div class="card p-1">
                        <div class="table-responsive text-nowrap">

                            <table id="tblExportInvoice" class="tblExportInvoice display nowrap table-bordered table-sm table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Check</th>
                                        <th>ExportInvoiceDetailsId</th>
                                        <th>MasterLCDetailsID</th>
                                        <th>Style</th>
                                        <th>Export Order No</th>
                                        <th>Shipment Date</th>
                                        <th>Destination</th>
                                        <th>LC Qty</th>
                                        <th>Unit</th>
                                        <th>Unit Price</th>
                                        <th>Total Value</th>
                                        <th>Inv Qty</th>
                                        <th>Rate</th>
                                        <th>Value</th>

                                        <th>Gross Weight</th>
                                        <th>Net Weight</th>
                                        <th>CBM</th>
                                        <th>Carton Qty</th>

                                        <th>Color Code</th>
                                        <th>LC Date</th>

                                        <th>Box Length</th>
                                        <th>Box Width</th>
                                        <th>Box Height   </th>



                                        <th>Action</th>


                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model != null)
                                    {
                                        foreach (var item in Model.ExportInvoiceDetails)
                                        {
                                            <tr class="txtMultExportInvoice">
                                                @*<td>

                                                        <input type="checkbox" class="clickchk">
                                                    </td>*@
                                                <td>
                                                    <input type="checkbox" class="clickchk" onchange="cbChange(this)">
                                                </td>


                                                <td>
                                                    @Html.DisplayTextFor(i => item.ExportInvoiceDetailsId)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.MasterLCDetailsID)
                                                </td>

                                                <td>
                                                    @Html.DisplayTextFor(i => item.StyleNo)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.ExportPoNo)
                                                </td>
                                                <td>
                                                    @Convert.ToString(string.Format("{0:dd-MMM-yy}", @item.ShipmentDate))
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.Destination)
                                                </td>

                                                <td>
                                                    @Html.DisplayTextFor(i => item.COM_MasterLC_Detail.OrderQty)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.COM_MasterLC_Detail.UnitMasterId)
                                                </td>

                                                <td>
                                                    @Html.DisplayTextFor(i => item.COM_MasterLC_Detail.UnitPrice)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.COM_MasterLC_Detail.TotalValue)
                                                </td>


                                                <td>
                                                    @Html.DisplayTextFor(i => item.InvoiceQty)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.InvoiceRate)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.InvoiceValue)
                                                </td>

                                                <td>
                                                    @Html.DisplayTextFor(i => item.GrossWeightLine)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.NetWeightLine)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.CBMLine)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.CartonQty)
                                                </td>

                                                <td>
                                                    @Html.DisplayTextFor(i => item.ColorCode)
                                                </td>
                                                <td>
                                                    @Convert.ToString(string.Format("{0:dd-MMM-yy}", @item.PODate))
                                                </td>

                                                <td>
                                                    @Html.DisplayTextFor(i => item.BoxLength)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.BoxWidth)
                                                </td>
                                                <td>
                                                    @Html.DisplayTextFor(i => item.BoxHeight)
                                                </td>


                                                <td>
                                                    <a data-itemid="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash fa-2x"></i></a>
                                                </td>

                                            </tr>
                                        }
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="1"></td>
                                        <td colspan="3">
                                            <div type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal"><i class="fa fa-plus fa-lg"></i></div>

                                        </td>
                                        <td class="text-right" colspan="7">
                                            <h6>Total Export Invoice Qty & Value :</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlorderqtyexportinvoice">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlorderrateexportinvoice">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlordervalueexportinvoice">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlordergrossweightexport">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlordernetweightexport">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlordercbmlineexport">0.00</h6>
                                        </td>
                                        <td colspan="1">
                                            <h6 class="ttlordercartonqtyexport">0.00</h6>
                                        </td>



                                        <td colspan="6"></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>



            </div>
            <br />

            <div class="row text-center m-2">
                <br />
                <div class="col-md-3"></div>
                @if (ViewBag.Title == "Create")
                {
                    <div class="col-md-3 col-xs-12 d-block mx-auto">
                        @if (ViewData.ModelState.IsValid)
                        {
                            <button class="form-control form-control-sm btn btn-success mb-2 btn-block" type="button" onclick="ExportInvoice_save()">Save</button>
                        }
                    </div>
                }
                else if (ViewBag.Title == "Edit")
                {
                    <div class="col-md-3 col-xs-12 d-block mx-auto">
                        <button class="form-control form-control-sm btn btn-warning mb-2 btn-block" type="button" onclick="ExportInvoice_save()">Update</button>
                    </div>
                }
                else if (ViewBag.Title == "Delete")
                {
                    <div class="col-md-3 col-xs-12 d-block mx-auto">
                        <button class="form-control form-control-sm btn btn-danger mb-2 btn-block" type="button" onclick="ExportInvoice_delete()">Delete</button>
                    </div>
                }
                <div class="col-md-3 col-xs-12 d-block mx-auto">
                    @Html.ActionLink("Back", "Index", null, null, new { @class = "form-control form-control-sm btn btn-info btn-block", @id = "btnBack" })
                </div>
                <div class="col-md-3"></div>
            </div>
        </div>
    </div>



    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                @*<div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">SEARCH</h5>

                                           <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
        </div>*@
                <div class="modal-body">
                    <div id="SubSectionList" class="row">
                        <div class="col order-md-1">
                            <form class="card p-2">

                                <br />
                                <div>


                                    <input type="text" id="myInputSearch" class="form-control" onkeyup="myFunctionSearch()" onmouseover="this.focus();" placeholder="Search for PONO." title="Type in a name">

                                </div>


                                <div class="table-responsive">

                                    <table id="tblmasterlcdetails" class="nowrap table-striped table-hover text-center">
                                        <thead>
                                            <tr>
                                                <th>checkbox</th>
                                                <th>ExportInvoiceDetailsId</th>
                                                <th>MasterLCDetailsID</th>
                                                <th>Style</th>
                                                <th>Export Order No</th>
                                                <th>Shipment Date</th>
                                                <th>Destination</th>
                                                <th>LC Qty</th>
                                                <th>Unit</th>
                                                <th>Unit Price</th>
                                                <th>Total Value</th>
                                                <th>Inv Qty</th>
                                                <th>Rate</th>
                                                <th>Value</th>
                                                <th>Gross Weight</th>
                                                <th>Net Weight</th>
                                                <th>CBM</th>
                                                <th>Carton Qty</th>

                                                <th>Color Code</th>
                                                <th>LC Date</th>

                                                <th>Box Length</th>
                                                <th>Box Width</th>
                                                <th>Box Height   </th>

                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (ViewBag.ExportInvoiceDetailsInformation != null)
                                            {
                                                foreach (var item in ViewBag.ExportInvoiceDetailsInformation)
                                                {
                                                    <tr class="txtMultmasterlcdetails">
                                                        <td>
                                                            @*@Html.CheckBox("0")*@
                                                            0
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>
                                                        <td>
                                                            @item.MasterLCDetailsID
                                                        </td>

                                                        <td>
                                                            @item.StyleName
                                                        </td>
                                                        <td>
                                                            @item.ExportPONo
                                                        </td>
                                                        <td>
                                                            @Convert.ToString(string.Format("{0:dd-MMM-yy}", @item.ShipmentDate))
                                                        </td>
                                                        <td>
                                                            @item.Destination
                                                        </td>

                                                        <td>
                                                            @item.OrderQty
                                                        </td>
                                                        <td>
                                                            @item.UnitMasterId
                                                        </td>

                                                        <td>
                                                            @item.UnitPrice
                                                        </td>
                                                        <td>
                                                            @item.TotalValue
                                                        </td>

                                                        <td>
                                                            @item.OrderQty
                                                        </td>
                                                        <td>
                                                            @item.UnitPrice
                                                        </td>
                                                        <td>
                                                            @item.TotalValue
                                                        </td>

                                                        <td>
                                                            0
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>


                                                        <td>
                                                            @item.ColorCode
                                                        </td>
                                                        <td>
                                                            @item.PODate
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>
                                                        <td>
                                                            0
                                                        </td>



                                                        <td>
                                                            <a data-itemid="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash fa-2x"></i></a>
                                                        </td>
                                                    </tr>
                                                }
                                            }

                                        </tbody>

                                        @*<tfoot>
                                    <tr>
                                        <td colspan="1"></td>
                                        <td class="text-right" colspan="4">
                                            <h4> Total Qty & Value :</h4>
                                        </td>
                                        <td colspan="1">
                                            <h4 class="ttlorderqtypidetails">0.00</h4>
                                        </td>
                                        <td colspan="1"></td>
                                        <td colspan="1">
                                            <h4 class="ttlordervaluepidetails">0.00</h4>
                                        </td>
                                        <td colspan="1"></td>
                                    </tr>
                                </tfoot>*@
                                    </table>
                                </div>
                                <br />

                            </form>

                        </div>
                    </div>  @*Datatable Initializer tblproductserialsearch*@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="checkModal" tabindex="-1" role="dialog" aria-labelledby="checkModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-center" id="checkModalLabel">Order Breakdown</h5>
                    <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="PackingList" class="row">
                        <div class="col order-md-1 mb-2">
                            <form class="card p-2">

                                <br />
                                @*<div class="mb-2">


                                        <input type="text" id="myInputSearch" class="form-control" onkeyup="myFunctionSearch()" onmouseover="this.focus();" placeholder="Search for PONO." title="Type in a name">

                                    </div>*@


                                <div class="table-responsive text-nowrap">

                                    <table id="tblExportInvoicePackingList" class="tbl display responsive nowrap table-striped table-hover no-footer text-center" cellspacing="0" width="100%">
                                        <thead>
                                            <tr>
                                                <th>Packing List Id</th>
                                                <th>MasterLC Details Id</th>
                                                <th>ExportInvoice Details Id</th>
                                                <th>Export PoNo</th>
                                                <th>Carton Qty</th>
                                                <th>Item Number</th>
                                                <th>UPC Number</th>
                                                <th>Qty</th>
                                                <th>Unit Price</th>
                                                <th>Total Value</th>
                                                <th>Action</th>
                                                <th>Is Delete</th>

                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (ViewBag.ExportInvoiceDetailsInformation != null)
                                            {
                                                foreach (var item in Model.ExportInvoiceDetails)
                                                {
                                                    foreach (var itemPacking in item.ExportInvoicePackingLists)
                                                    {
                                                        <tr class="txtMultpackinglist">
                                                            <td>
                                                                @itemPacking.ExportInvoicePackingListId
                                                            </td>
                                                            <td>
                                                                @item.MasterLCDetailsID
                                                            </td>

                                                            <td>
                                                                @itemPacking.ExportInvoiceDetailsId
                                                            </td>
                                                            <td>
                                                                @itemPacking.ExportPoNo
                                                            </td>

                                                            <td>
                                                                @itemPacking.CartonQty
                                                            </td>

                                                            <td>
                                                                @itemPacking.ItemNumber
                                                            </td>
                                                            <td>
                                                                @itemPacking.UPCNumber
                                                            </td>

                                                            <td>
                                                                @itemPacking.Qty
                                                            </td>
                                                            <td>
                                                                @itemPacking.UnitPrice
                                                            </td>
                                                            <td>
                                                                @itemPacking.TotalValue
                                                            </td>

                                                            <td>
                                                                <a class="dlttrash" data-itemId="0" href="#"><i class="fa fa-trash fa-2x"></i></a>
                                                            </td>
                                                            <td>
                                                                @itemPacking.isDelete
                                                            </td>


                                                        </tr>
                                                    }

                                                }
                                            }

                                        </tbody>

                                        @*<tfoot>
                                                <tr>
                                                    <td colspan="1"></td>
                                                    <td class="text-right" colspan="4">
                                                        <h4> Total Qty & Value :</h4>
                                                    </td>
                                                    <td colspan="1">
                                                        <h4 class="ttlorderqtypidetails">0.00</h4>
                                                    </td>
                                                    <td colspan="1"></td>
                                                    <td colspan="1">
                                                        <h4 class="ttlordervaluepidetails">0.00</h4>
                                                    </td>
                                                    <td colspan="1"></td>
                                                </tr>
                                            </tfoot>*@
                                    </table>
                                </div>
                                <br />

                            </form>
                            <br />


                            <div class="row">

                                <div class="col-4">
                                </div>


                                <div class="col">
                                    <button type="button" onclick="AddPackngList()" class="btn btn-sm btn-success mb-2 btn-block">Add</button>


                                </div>

                                <div class="col">

                                    <button type="button" onclick="ShowAllPackingList()" class="btn btn-sm btn-info mb-2 btn-block">Show All</button>

                                </div>

                                <div class="col-4">

                                </div>

                            </div>


                        </div>
                    </div>  @*Datatable Initializer tblproductserialsearch*@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="notifyPartyModal" tabindex="-1" role="dialog" aria-labelledby="notifyPartyModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="notifyPartyModalLabel">Add Notify Party</h5>
                    <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="notifyParty" class="row">
                        <div class="col order-md-1 mb-2">
                            <form class="card p-2">
                                <div class="row">
                                    <div class="col-md-12 mb-2">

                                        <label>Notify Party</label>
                                        <input type="text" id="NotifyPartyName" class="form-control form-control-sm" />
                                    </div>
                                    <div class="col-md-12 mb-2">

                                        <label>Address 1</label>
                                        <input type="text" id="NotifyPartyAddress1" class="form-control form-control-sm" />
                                    </div>
                                    <div class="col-md-12 mb-2">
                                        <label>Address 2</label>
                                        <input type="text" id="NotifyPartyAddress2" class="form-control form-control-sm" />


                                        <label>Country</label>
                                        @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control countryNotifyParty" })

                                    </div>

                                    <br />
                                    <button type="button" onclick="SaveNotifyParty()" class="btn btn-success">Save</button>
                                </div>

                            </form>
                            <br />
                        </div>
                    </div>  @*Datatable Initializer tblproductserialsearch*@
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="portOfLoadingModal" tabindex="-1" role="dialog" aria-labelledby="portOfLoadingLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="portOfLoadingLabel">Add Port Of Loading</h5>
                    <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="modalbodyfahad" class="p-4">
                        <div class="col-md-12 order-md-1">
                            <h4 class="mb-3">Port Of Loading @ViewBag.Title</h4>
                            <div class="row">
                                <div class="col-md-12 mb-2">
                                    @Html.HiddenFor(model => model.PortOfLoading.PortOfLoadingId, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.LabelFor(model => model.PortOfLoading.PortOfLoadingName)
                                    @Html.EditorFor(model => model.PortOfLoading.PortOfLoadingName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PortOfLoading.PortOfLoadingName, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-12 mb-2">

                                    @Html.LabelFor(model => model.PortOfLoading.PortCode)
                                    @Html.EditorFor(model => model.PortOfLoading.PortCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PortOfLoading.PortCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-12 mb-2">
                                    @Html.LabelFor(model => model.PortOfLoading.CountryId, "Country")
                                    @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.PortOfLoading.CountryId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <br />

                            <div class="row text-center m-2">
                                <br />
                                <div class="col-md-2"></div>
                                <div class="col-md-4 col-xs-12 d-block mx-auto">
                                    <input type="button" onclick="PortOfLoading()" value="Save" class="btn btn-primary btn-block" />
                                </div>
                                <div class="col-md-4 col-xs-12 d-block mx-auto">
                                    @Html.ActionLink("Back", "Create", "ExportInvoiceMasters", null, new { @class = "btn btn-info btn-block" })

                                </div>
                                <div class="col-md-2"></div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="portOfDischargeModal" tabindex="-1" role="dialog" aria-labelledby="portOfDischargeLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="portOfDischargeLabel">Add Port Of Discharge</h5>
                    <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="modalbodyfahad" class="p-4">
                        <div class="col-md-12 order-md-1">
                            <h4 class="mb-3">Port Of Discharge @ViewBag.Title</h4>
                            <div class="row">
                                <div class="col-md-12 mb-2">
                                    @Html.HiddenFor(model => model.PortOfDischarge.PortOfDischargeId, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.LabelFor(model => model.PortOfDischarge.PortOfDischargeName)
                                    @Html.EditorFor(model => model.PortOfDischarge.PortOfDischargeName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PortOfDischarge.PortOfDischargeName, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-12 mb-2">

                                    @Html.LabelFor(model => model.PortOfDischarge.PortCode)
                                    @Html.EditorFor(model => model.PortOfDischarge.PortCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PortOfDischarge.PortCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-12 mb-2">
                                    @Html.LabelFor(model => model.PortOfDischarge.CountryId, "Country")
                                    @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control countryDischarge" })
                                    @Html.ValidationMessageFor(model => model.PortOfDischarge.CountryId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <br />

                            <div class="row text-center m-2">
                                <br />
                                <div class="col-md-2"></div>
                                <div class="col-md-4 col-xs-12 d-block mx-auto">
                                    <input type="button" onclick="PortOfDischarge()" value="Save" class="btn btn-primary btn-block" />
                                </div>
                                <div class="col-md-4 col-xs-12 d-block mx-auto">
                                    @Html.ActionLink("Back", "Create", "ExportInvoiceMasters", null, new { @class = "btn btn-info btn-block" })

                                </div>
                                <div class="col-md-2"></div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="finalDestinationModal" tabindex="-1" role="dialog" aria-labelledby="finalDestinationLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="finalDestinationLabel">Add Final Destination</h5>
                    <button id="btnclose" type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="modalbodyfahad" class="p-4">
                        <div class="col-md-12 order-md-1">
                            <h4 class="mb-3">Final Destination @ViewBag.Title</h4>
                            <div class="row">
                                <div class="col-md-12 mb-2">
                                    @Html.HiddenFor(model => model.Destination.DestinationID, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.LabelFor(model => model.Destination.DestinationName)
                                    @Html.EditorFor(model => model.Destination.DestinationName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Destination.DestinationName, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-12 mb-2">

                                    @Html.LabelFor(model => model.Destination.DestinationCode)
                                    @Html.EditorFor(model => model.Destination.DestinationCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Destination.DestinationCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="col-md-12 mb-2">
                                    @Html.LabelFor(model => model.Destination.CountryId, "Country")
                                    @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control countryDestination" })
                                    @Html.ValidationMessageFor(model => model.Destination.CountryId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <br />

                            <div class="row text-center m-2">
                                <br />
                                <div class="col-md-2"></div>
                                <div class="col-md-4 col-xs-12 d-block mx-auto">
                                    <input type="button" onclick="FinalDestination()" value="Save" class="btn btn-primary btn-block" />
                                </div>
                                <div class="col-md-4 col-xs-12 d-block mx-auto">
                                    @Html.ActionLink("Back", "Create", "ExportInvoiceMasters", null, new { @class = "btn btn-info btn-block" })

                                </div>
                                <div class="col-md-2"></div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    @*<button type="button" class="btn btn-primary">Save changes</button>*@
                </div>
            </div>
        </div>
    </div>
}


<script>

    //$("#BuyerId").select2();
    $("#BuyerGroupId").select2();

    $("#SupplierId").select2();

    $("#ManufactureId").select2();


    $("#FirstNotifyPartyId").select2();
    $("#SecoundNotifyPartyId").select2();
    $("#ThirdNotifyPartyId").select2();

    $("#TradeTermId").select2();
    $("#PortOfLoadingId").select2();
    //$("#MasterLCId").select2();
    //$('#BuyerId').change();


    $("#divmainmark").hide();


    $("#PortOfDischargeId").select2();
    //$("#DestinationId").select2();

    $('#DestinationId').select2({})
        .on("select2:select", function (e) {
            if ($('#DestinationId').val() > 0) {

                //alert('enter');
                //alert('masterlcidchange');
                //MasterLC_Info();
                Buyer_Info();
                //alert('buyer info');
                NotifyParty_Info();
                //ExportOrderSummaryGrid();
                //multInputsexportinvoice();
            }
            else {
                alert('Please Select Destination Information First.')
            }

            // have to fire our own change event because value set in JS
            // TODO capture ahead of time instead of using default
            //$(this).trigger('change');
            console.log("select2:select")
        });


         $('#BuyerId').select2({})
        .on("select2:select", function (e) {
            if ($('#BuyerId').val() > 0) {

                //alert('masterlcidchange');
                //MasterLC_Info();
                //Buyer_Info();
                //alert('buyer info');
                NotifyParty_Info();
                //ExportOrderSummaryGrid();
                //multInputsexportinvoice();
            }
            else {
                alert('Please Select Buyer Information First.')
            }

            // have to fire our own change event because value set in JS
            // TODO capture ahead of time instead of using default
            //$(this).trigger('change');
            //console.log("select2:select")
        });


    var newMasterLCDetailsId;
    var newDetailsId;
    var newOrderNo;
    var newUnitPrice;

    function cbChange(obj) {
        var cbs = document.getElementsByClassName("clickchk");
        for (var i = 0; i < cbs.length; i++) {
            cbs[i].checked = false;
        }
        obj.checked = true;
        //console.log(obj);


        var table = $('#tblExportInvoice').DataTable();
        //var tableserial = $('#tblserial').DataTable();
        var data = null;

        if (obj.checked == true) {
            //alert('working');
            //table = $('#tbl').DataTable();
            //table.draw();

            data = table.row($('input[type=checkbox]:checked').parents('tr')).data();

            //alert('clicked');
            //console.log(data);

            //alert(data[3]);
            //var termsid = data[0];
            serialno = data[4];

            newMasterLCDetailsId = data[2];
            newDetailsId = data[1];
            newOrderNo = data[4];
            newUnitPrice = data[9];

            //alert(serialno);


            $('#tblExportInvoicePackingList tbody tr').show();
            //alert('working');
            $('#tblExportInvoicePackingList tbody tr').each(function () {
                // $(this).hide();

                if ($.trim($(this).find('.ExportInvoiceMasterLCDetailsId').text()) == newMasterLCDetailsId) { // if V is selected, hide
                    //  alert('found');
                    $(this).show();
                }
                else {
                    $(this).hide();
                }
            });
        }
        else {
            // alert('You Un-Checked it');
        }

    }
    var tblmasterlcdetailsabc;


    $(document).ready(function () {

        tblmasterlcdetailsabc = $('#tblmasterlcdetails').dataTable({


            "aoColumns": [

                { "sClass": "checkbox", "visible": false },
                { "sClass": "ExportInvoiceDetailsId", "visible": false },
                { "sClass": "MasterLCDetailsID", "visible": false },
                { "sClass": "StyleNo", "visible": true },
                { "sClass": "ExportPoNo", "visible": true },
                { "sClass": "ShipmentDate", "visible": true },
                { "sClass": "Destination", "visible": true },
                { "sClass": "LCQty", "visible": true },
                { "sClass": "UnitMasterId", "visible": true },
                { "sClass": "UnitPrice", "visible": true },
                { "sClass": "TotalValue", "visible": true },

                { "sClass": "InvoiceQty", "visible": false, render: $.fn.dataTable.render.number(',', '.', 0, '') },
                { "sClass": "InvoiceRate", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                { "sClass": "InvoiceValue", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },


                { "sClass": "GrossWeightLine", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                { "sClass": "NetWeightLine", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                { "sClass": "CBMLine", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                { "sClass": "CartonQty", "visible": false, render: $.fn.dataTable.render.number(',', '.', 0, '') },

                ////newly added column
                { "sClass": "ColorCode", "visible": true },
                { "sClass": "PODate", "visible": true },

                { "sClass": "BoxLength", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                { "sClass": "BoxWidth", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                { "sClass": "BoxHeight", "visible": false, render: $.fn.dataTable.render.number(',', '.', 2, '') },
                ////newly added column


                { "sClass": "action", "visible": true }

            ],
            //dom: '<"float-left">rt<"row"<"col-sm-4"l><"col-sm-4"><"col-sm-4"p>>',

            rowCallback: function (row) {
                $(row).addClass('txtMultmasterlcdetails');
            },
            select: "multi",
            columnDefs: [{
                targets: [-1],
                render: function () {
                    return "<button type='button'>=></button>"
                }
            }],
            buttons: [{
                extend: "selectRows",

                text: 'Attach To Export Invoice',
                action: function (e, sourceTable, button, config) {

                    var selectedRows = sourceTable.rows(".selected");
                    var mData = selectedRows.data();
                    selectedRows.remove().draw();
                    targetTable = $("#tblExportInvoice").DataTable();
                    $.each(mData, function (idx, item) {
                        targetTable.row.add(JSON.parse(JSON.stringify(item)));
                    })
                    targetTable.draw();
                    multInputsexportinvoice();
                }
            }],
            initComplete: function () {
                $("#tblmasterlcdetails button").on("click", function (evt) {

                    var t1 = $("#tblmasterlcdetails").DataTable();
                    var t2 = $("#tblExportInvoice").DataTable();
                    var tr = $(this).closest("tr");
                    var row = t1.row(tr);
                    var data = JSON.parse(JSON.stringify(row.data()));
                    //alert(data[0]);
                    row.remove().draw();
                    t2.row.add(data).draw();

                    multInputsexportinvoice();
                });
            },
            "bFilter": true,
            //"bSort": true,
            //"bInfo": true,
            //"async": true,
            "paging": true,
            //"retrieve": true,
            "iDisplayLength": 20,
            "lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],
            "scrollX": true,
            "oLanguage": { "sZeroRecords": "", "sEmptyTable": "" },
            dom: 'tBip',
        }); //



    })



        function myFunctionSearch() {

        $('#myInputSearch').keyup(function () {
            //console.log($('#tblmasterlcdetails').DataTable().rows().data());
            //console.log(tblmasterlcdetailsabc.rows().data());

            //alert('test');
            //$('#tblmasterlcdetails').search($(this).val()).draw();

            tblmasterlcdetailsabc = $('#tblmasterlcdetails').DataTable();
            tblmasterlcdetailsabc.search($(this).val()).draw();
        })



    }





    function multInputpackinglist() {


        //$(".ttlorderqtyexportinvoice").text(0);
        //$(".ttlorderrateexportinvoice").text(0);



        var totalorderqty = 0;
        var totalordervalue = 0;





        // for each row:

        $("tr.txtMultpackinglist").each(function () {
            //alert('hit')

            var $val1 = $('.UnitPrice', this).text().replace(/[\$,]/g, '');
            var $val2 = $('.Qty', this).text().replace(/[\$,]/g, '');
            //var $val3 = $('.InvoiceRate', this).text().replace(/[\$,]/g, '');

            var $val4 = 0;



            if ($val2 > 0) {

                $val4 = $val1 * $val2
                $('.TotalValue', this).text($val4.toFixed(3));

            }
            //else {
            //    //$('.InvoiceValue', this).text(0);
            //    //$('.InvoiceRate', this).text(0);
            //    $('.TotalValue', this).text(0);

            //}

            //totalorderqty += parseFloat($val2);
            //totalordervalue += parseFloat($val4.toFixed(3));

        });








    }


    function multInputsexportinvoice() {


        $(".ttlorderqtyexportinvoice").text(0);
        $(".ttlorderrateexportinvoice").text(0);
        $(".ttlordervalueexportinvoice").text(0);


        $(".ttlordergrossweightxportinvoice").text(0);
        $(".ttlordernetweightinvoice").text(0);
        $(".ttlordercbmlineinvoice").text(0);
        $(".ttlordercartonqtyexportinvoice").text(0);



        var totalorderqty = 0;
        var totalordervalue = 0;
        var avgrate = 0;


        var totalgrossweight = 0;
        var totalnetweight = 0;
        var totalcbm = 0;
        var totalcartonqty = 0;



        // for each row:

        $("tr.txtMultExportInvoice").each(function () {
            // get the values from this row:
            //alert($(this).text());

            //{ "sClass": "UnitPrice", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            //{ "sClass": "TotalValue", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            //{ "sClass": "InvoiceQty", "visible": true, render: $.fn.dataTable.render.number(',', '.', 0, '') },
            //{ "sClass": "InvoiceRate", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            //{ "sClass": "InvoiceValue", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') }






            var $val1 = $('.UnitPrice', this).text().replace(/[\$,]/g, '');
            var $val2 = $('.InvoiceQty', this).text().replace(/[\$,]/g, '');
            //var $val3 = $('.InvoiceRate', this).text().replace(/[\$,]/g, '');
            var $val3 = $('.InvoiceValue', this).text().replace(/[\$,]/g, '');
            var $val4 = 0;



            var $val5 = $('.GrossWeightLine', this).text().replace(/[\$,]/g, '');
            var $val6 = $('.NetWeightLine', this).text().replace(/[\$,]/g, '');
            var $val7 = $('.CBMLine', this).text().replace(/[\$,]/g, '');
            var $val8 = $('.CartonQty', this).text().replace(/[\$,]/g, '');





            var $val9 = $('.InvoiceRate', this).text().replace(/[\$,]/g, '');

            var $vallength = $('.BoxLength', this).text().replace(/[\$,]/g, '');
            var $valwidth = $('.BoxWidth', this).text().replace(/[\$,]/g, '');
            var $valheight = $('.BoxHeight', this).text().replace(/[\$,]/g, '');
            var $valcartonqty = $('.CartonQty', this).text().replace(/[\$,]/g, '');
            var $cbmlinecalculation = 0;

            if ($vallength > 0 && $valwidth > 0 && $valheight > 0 && $valcartonqty > 0)
            {
                $cbmlinecalculation = ($vallength * $valwidth * $valheight * $valcartonqty) / 100000;

                $('.CBMLine', this).text($cbmlinecalculation);
                $val7 = $cbmlinecalculation;
            }
            else
            {

            }


            if ($val2 > 0) {

                if ($val9 > 0) {
                    $val4 = $val2 * $val9;
                }
                else {
                    $val4 = $val2 * $val1;
                    $('.InvoiceRate', this).text($val1);
                }

                $('.InvoiceValue', this).text($val4.toFixed(3));

            }
            else {
                $('.InvoiceValue', this).text(0);
                $('.InvoiceRate', this).text(0);

            }

            //alert($val1);
            //alert($val2);
            totalorderqty += parseFloat($val2);
            totalordervalue += parseFloat($val4.toFixed(3));


            totalgrossweight += parseFloat($val5);
            totalnetweight += parseFloat($val6);
            totalcbm += parseFloat($val7);
            totalcartonqty += parseFloat($val8);

            //avgrate = parseFloat($val1);
            //ttlqty += $val1;

            //});
            //alert(totalorderqty);
            //$(".subtotalamount").text(mult);



        });






        avgrate = (totalordervalue / totalorderqty);



        $(".ttlorderqtyexportinvoice").val(totalorderqty.toLocaleString());
        $(".ttlorderqtyexportinvoice").text(totalorderqty.toLocaleString());

        $(".ttlorderrateexportinvoice").val(avgrate.toFixed(3));
        $(".ttlorderrateexportinvoice").text(avgrate.toFixed(3));


        $(".ttlordervalueexportinvoice").val(totalordervalue.toLocaleString());
        $(".ttlordervalueexportinvoice").text(totalordervalue.toLocaleString());


        $(".ttlordergrossweightexport").val(totalgrossweight.toLocaleString());
        $(".ttlordergrossweightexport").text(totalgrossweight.toLocaleString());

        $(".ttlordernetweightexport").val(totalnetweight.toLocaleString());
        $(".ttlordernetweightexport").text(totalnetweight.toLocaleString());

        $(".ttlordercbmlineexport").val(totalcbm.toLocaleString());
        $(".ttlordercbmlineexport").text(totalcbm.toLocaleString());

        $(".ttlordercartonqtyexport").val(totalcartonqty.toLocaleString());
        $(".ttlordercartonqtyexport").text(totalcartonqty.toLocaleString());





        $("#TotalInvoiceQty").val(totalorderqty);//---fahad
        $("#TotalInvoiceQty").text(totalorderqty);//---fahad

        $("#TotalValue").val(totalordervalue);//---fahad
        $("#TotalValue").text(totalordervalue);//---fahad

        $("#Rate").val(avgrate.toFixed(3));//---fahad
        $("#Rate").text(avgrate.toFixed(3));//---fahad


        $("#GrossWeight").val(totalgrossweight);//---fahad
        $("#GrossWeight").text(totalgrossweight);//---fahad

        $("#NetWeight").val(totalnetweight);//---fahad
        $("#NetWeight").text(totalnetweight);//---fahad

        $("#CBM").val(totalcbm);//---fahad
        $("#CBM").text(totalcbm);//---fahad

        $("#TotalCartonQty").val(totalcartonqty);//---fahad
        $("#TotalCartonQty").text(totalcartonqty);//---fahad



        var totalorderqty = 0;
        var totalordervalue = 0;
        var avgrate = 0;

        $("tr.txtMultExportInvoiceMaster").each(function () {

            var $val1 = $('.Qty', this).text().replace(/[\$,]/g, '');
            var $val2 = $('.Value', this).text().replace(/[\$,]/g, '');

            totalorderqty += parseFloat($val1);
            totalordervalue += parseFloat($val2);

        });

        $(".ttlorderqtymaster").val(totalorderqty.toLocaleString());
        $(".ttlorderqtymaster").text(totalorderqty.toLocaleString());

        $(".ttlordervaluemaster").val(totalordervalue.toLocaleString());
        $(".ttlordervaluemaster").text(totalordervalue.toLocaleString());



        $("#TotalShipped").val(totalorderqty);//---fahad
        $("#TotalShipped").text(totalorderqty);//---fahad


    }

     function ExportInvoice_delete() {
         var InvoiceId = $("#InvoiceId").val();
        //alert(SalesId);
        $.ajax({

            url: '@Url.Action("Delete", "ExportInvoiceMasters")',
            //url: '@Url.Action("Delete")',
            data: JSON.stringify({ id: InvoiceId }), //use id here
            //data: JSON.stringify(salesmain),
            type: 'POST',
            async: true,
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {

                if (result.Success == "1") {




                    toastr.error('Data Delete Successfully');
                    //window.location.href = "/Invoice/index";

                     window.setTimeout(function () {

                            // Move to a new location or you can do something else
                                 window.location.href = '@Url.Action("Index", "ExportInvoiceMasters")';

                        }, 500);
                }
                else {
                    //alert(result.ex);
                    if (!result.success) {
                        for (var error in result.errors) {
                            $('#errorMessages').append(error + '<br />');
                        }
                    }
                }
            },
            error: function () {
                toastr.error('Unable to Delete');
            }
        });
    }


    var x = "@ViewBag.MasterLCIDNo";
    if (x > 0) {
        $('#MasterLCId').val("@ViewBag.MasterLCIDNo");
    }
    else {

    }


</script>
<script>



    var tblexportordermain = $('#tblexportordermain').dataTable({

        "aoColumns": [

            { "sClass": "InvNo", "visible": true },
            { "sClass": "InvDate", "visible": true },
            { "sClass": "Qty", "visible": true },
            { "sClass": "Value", "visible": true },
            { "sClass": "Action", "visible": true }
            //,                { "sClass": "OrderValue", "visible": true, render: $.fn.dataTable.render.number(',', '.', 0, '') },

        ],
        "bFilter": false,
        "bSort": false,
        "bInfo": false,
        "paging": true,
        "iDisplayLength": 50,
        "lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],
        rowCallback: function (row) {
            $(row).addClass('txtMultExportInvoiceMaster');
        }
    })

    $('#BuyerGroupId').attr("disabled", true);

    //$('#BuyerId').attr("disabled", true);
    //$('#PortOfLoadingId').attr("disabled", true);
    $('#CommercialCompanyId').attr("disabled", true);
    //$('#ShipModeId').attr("disabled", true);
    //$('#DestinationId').attr("disabled", true);
    $('#TotalLCQty').attr("disabled", true);


    $('#NetWeight').attr("disabled", true);
    $('#GrossWeight').attr("disabled", true);
    $('#CBM').attr("disabled", true);
    $('#TotalCartonQty').attr("disabled", true);




    //MasterLC_Info();
    ExportOrderSummaryGrid();

    //$('#SupplierId').attr("disabled", true);

    $('#myform').submit(function () {
        $('select').removeAttr('disabled');
        //alert('ok');
    });



    $('#MasterLCId').select2({})
        .on("select2:select", function (e) {
            if ($('#MasterLCId').val() > 0) {

                //alert('masterlcidchange');
                MasterLC_Info();
                NotifyParty_Info();
                ExportOrderSummaryGrid();
                multInputsexportinvoice();
            }
            else {
                alert('Please Select Master LC Information First.')
            }

            // have to fire our own change event because value set in JS
            // TODO capture ahead of time instead of using default
            //$(this).trigger('change');
            console.log("select2:select")
        });


    //$('#MasterLCId').change(function () {

    //    if ($('#MasterLCId').val() > 0) {

    //        //alert('masterlcidchange');
    //        MasterLC_Info();
    //        NotifyParty_Info();
    //        ExportOrderSummaryGrid();
    //        multInputsexportinvoice();
    //    }
    //    else {
    //        alert('Please Select Master LC Information First.')
    //    }


    //})



    //$('#BuyerId').click(function () {

    //    if ($('#BuyerId').val() > 0) {

    //        NotifyParty_Info();


    //    }
    //    else {
    //       // alert('Please Select Master LC Information First.')
    //    }


    //})



    function ExportOrderSummaryGrid() {
        tblexportordermain = $('#tblexportordermain').DataTable();
        tblexportordermain
            .clear()
            .draw();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetExportInvoiceSummaryByMasterLCId", "ExportInvoiceMasters")',
            dataType: 'json',
            async: false,
            data: { id: $('#MasterLCId').val() },
            success: function (data) {
                //console.log(data);
                //alert('test');
                for (var i = 0; i < data.length; i++) {
                    $('#tblexportordermain').dataTable().fnAddData([data[i].InvoiceNo, data[i].InvoiceDate, data[i].TotalInvoiceQty, data[i].TotalValue,
                        ' <span data-toggle="tooltip" title="Commercial Inv. Report[Export]"> <a class="far fa-file-pdf btn btn-outline-success btn-xs" href="/ExportInvoiceMasters/PrintCIE/'+data[i].InvoiceId+'?type=pdf" target="_blank"> </a> </span>'

                    ]);

                   // alert(data[i].MasterLCId); 'class= "OrderValue"' +
                }

            },
            error: function (ex) {
                alert('Failed.' + ex);
            }
        });
    }

      function MasterLC_Info() {

                var MyAppUrlSettings = {
                MyUsefulUrl : '@Url.Action("MasterLCInfoByMasterLCId", "ExportInvoiceMasters")'
                }

                $.ajax({
                type: 'POST',
                url: MyAppUrlSettings.MyUsefulUrl,
                dataType: 'json',
                async: false,
                    data: { id: $("#MasterLCId").val() },

                        success: function (data) {
                            //alert('working');
                            console.log(data);

                            $("#BuyerGroupId").val(data.BuyerGroupId).show();

                            //$("#BuyerId").val(data.BuyerId).show();

                            //$("#PortOfLoadingId").val(data.PortOfLoadingId).show();
                            //$("#PortOfDischargeId").val(data.PortOfDischargeId).show();

                            $("#CommercialCompanyId").val(data.CommercialCompanyId).show();
                            //$("#ShipModeId").val(data.ShipModeId).show();


                            //$("#DestinationId").val(data.DestinationId).show();
                            $("#TotalLCQty").val(data.TotalLCQty).show();
                            $("#MasterLCId").val(data.MasterLCId).show();

                            //alert('Data Loaded');
                            //$('#BuyerId').change();
                            $('#BuyerGroupId').change();


                    },
                error: function (ex) {
                alert('Failed.' + ex);
                    }
                    });
                return false;

    };



    function NotifyParty_Info() {

        //alert('prdsearch');
        $("#FirstNotifyPartyId").empty();
        $("#SecoundNotifyPartyId").empty();
        $("#ThirdNotifyPartyId").empty();

        //$("#ProductDescription").val("=N/A=");
        //$("#UnitPrice").val(0);
        //alert('notifyparty');



            $.ajax({
                type: 'POST',
                url: '@Url.Action("getNotifyPartyList", "ExportInvoiceMasters")',
                dataType: 'json',
                async: false,
                data: { id: $("#BuyerId").val(), finaldestinationid: $("#DestinationId").val() },
                success: function (data) {
                    var s = '';//'<option value="-1">--Please Select--</option>';
                    //$.each(data, function (i, data) {
                    //    $("#Product").append('<option value="'+ data.Value + '">'
                    //        + data.Text + '</option>');
                    //});
                    //var items = "";
                    //items += "<option value='' disabled selected>Please select</option>";
                    for (var i = 0; i < data.length; i++) {
                        s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                    }
                    $("#FirstNotifyPartyId").html(s);
                    $("#SecoundNotifyPartyId").html(s);
                    $("#ThirdNotifyPartyId").html(s);

                    //var opts = data.length;
                    //for (var i = 0; i < opts; i++) {
                    //    if (ddl.options[i].value == data.StockUnitID) {
                    //        ddl.options[i].selected = true;
                    //        break;
                    //    }
                    //}


                },
                error: function (ex) {
                    toastr.error("No Notify Party Found Under the Buyer or Country Doesn't Match");
                    ///alert('Failed.' + ex);
                }

            });
            return false;
        };


    function Buyer_Info() {

        //alert('prdsearch');
        $("#BuyerId").empty();



            $.ajax({
                type: 'POST',
                url: '@Url.Action("getBuyerList", "ExportInvoiceMasters")',
                dataType: 'json',
                async: false,
                data: { buyergroupid: $("#BuyerGroupId").val(), finaldestinationid: $("#DestinationId").val() },
                success: function (data) {


                    //alert('nit');
                    var s = '';//'<option value="-1">--Please Select--</option>';

                    for (var i = 0; i < data.length; i++) {
                        s += '<option value="' + data[i].Value + '">' + data[i].Text + '</option>';
                    }
                    $("#BuyerId").html(s);

                    if (data.length == 0) {
                        toastr.error("No Buyer Found Under the Final Destination or Country Doesn't Match");

                    }

                },
                error: function (ex) {

                    toastr.error("No Buyer Found Under the Final Destination or Country Doesn't Match");
                    //alert('Failed.' + ex);
                }

            });
            return false;
        };


    function CurrentDate() {
        var date = new Date();
        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
            "Aug", "Sep", "Oct", "Nov", "Dec"];
        var val = date.getDate() + "-" + months[date.getMonth()] + "-" + date.getFullYear();
        return val;
    }
    if ($('h2').text() == "Export Invoice Edit") {
        if ($("#InvoiceDate").val() == "01-Jan-1900")
        {
            $("#InvoiceDate").val('');

        }
    }
    else {
        $("#InvoiceDate").val(CurrentDate());
        $("#ExfactoryDate").val(CurrentDate());
        $("#OnboardDate").val(CurrentDate());
        $("#ExpDate").val(CurrentDate());
        $("#BLDate").val(CurrentDate());
        $("#BookingDate").val(CurrentDate());

        $("#CargoHandoverDate").val(CurrentDate());


        NotifyParty_Info();

    }
   // $(".datepicker").datepicker();
    $("#InvoiceDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#InvoiceDate").datepicker("option", "dateFormat");
            //setter
            $("#InvoiceDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });

    $("#CargoHandoverDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#CargoHandoverDate").datepicker("option", "dateFormat");
            //setter
            $("#CargoHandoverDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });

    $("#ExfactoryDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#ExfactoryDate").datepicker("option", "dateFormat");
            //setter
            $("#ExfactoryDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });

    $("#OnboardDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#OnboardDate").datepicker("option", "dateFormat");
            //setter
            $("#OnboardDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });


    $("#ExpDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#ExpDate").datepicker("option", "dateFormat");
            //setter
            $("#ExpDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });

    $("#BLDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#BLDate").datepicker("option", "dateFormat");
            //setter
            $("#BLDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });
    $("#BookingDate").datepicker({
        onSelect: function (date) {
            // Your CSS changes, just in case you still need them
            $('a.ui-state-default').removeClass('ui-state-highlight');
            $(this).addClass('ui-state-highlight');
            var dateFormat = $("#BookingDate").datepicker("option", "dateFormat");
            //setter
            $("#BookingDate").datepicker("option", "dateFormat", 'dd-M-yy');
        }
    });


        var x = "@ViewBag.MasterLCIDNo";
        if (x > 0) {
            $('#MasterLCId').val("@ViewBag.MasterLCIDNo");
        }
        else
        {

        }

        function MusterLCId_load() {
            var MasterLCId = 0;
            MasterLCId = $('#MasterLCId').val();

            var y = "@ViewBag.Title";
            if (y == "Create") {
                window.location.href = "Create?MasterLCId=" + MasterLCId;

            }
            else {
                window.location.href = "?MasterLCId=" + MasterLCId;
            }

        };











    //$('#tblExportInvoice tr').click(function (event) {
    //    if (event.target.type !== 'checkbox') {
    //        $(':checkbox', this).trigger('click');
    //    }
    //});

    var tblExportInvoice = $('#tblExportInvoice').dataTable({

        "aoColumns": [

            {
                "sClass": "checkbox",
                "visible": true,
                "render": function () {
                    return '<input type="checkbox" class="clickchk"  onchange ="cbChange(this)"  data-toggle="modal" data-target="#checkModal" >';
                }
            },
            { "sClass": "ExportInvoiceDetailsId", "visible": false },
            { "sClass": "MasterLCDetailsID", "visible": false },
            { "sClass": "StyleNo", "visible": true },
            { "sClass": "ExportPoNo", "visible": true },
            { "sClass": "ShipmentDate", "visible": true },
            { "sClass": "Destination", "visible": true },
            { "sClass": "LCQty", "visible": true },
            { "sClass": "UnitMasterId", "visible": true },
            { "sClass": "UnitPrice", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "TotalValue", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },



            { "sClass": "InvoiceQty", "visible": true, render: $.fn.dataTable.render.number(',', '.', 0, '') },
            { "sClass": "InvoiceRate", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "InvoiceValue", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },


            { "sClass": "GrossWeightLine", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "NetWeightLine", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "CBMLine", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "CartonQty", "visible": true, render: $.fn.dataTable.render.number(',', '.', 0, '') },

            ////newly added column
            { "sClass": "ColorCode", "visible": true },
            { "sClass": "PODate", "visible": true },

            { "sClass": "BoxLength", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "BoxWidth", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            { "sClass": "BoxHeight", "visible": true, render: $.fn.dataTable.render.number(',', '.', 2, '') },
            ////newly added column




            { "sClass": "action", "visible": true }

        ],

        "tableTools": {
            "sRowSelector": "td:not(:first-child)"
        },
        dom: 'itpfB',
        select: "multi",
        columnDefs: [{
            targets: [-1],
            render: function () {
                return "<button type='button' >=></button>"
            }
        }],
        buttons: [{
            extend: "selectRows",

            text: 'Detach From Export Invoice',
           
            action: function (e, sourceTable, button, config) {

                var selectedRows = sourceTable.rows(".selected");
                var mData = selectedRows.data();
                selectedRows.remove().draw();
                targetTable = $("#tblmasterlcdetails").DataTable();
                $.each(mData, function (idx, item) {
                    targetTable.row.add(JSON.parse(JSON.stringify(item)));
                })
                targetTable.draw();
                multInputsexportinvoice();
            }
            //dom: {
            //    container: {
            //        className: 'dt-buttons'
            //    },
            //    button: {
            //        className: 'btn btn-danger'
            //    }
            //},
        }],

        initComplete: function () {
            $("#tblExportInvoice button").on("click", function (evt) {

                var t1 = $("#tblExportInvoice").DataTable();
                var t2 = $("#tblmasterlcdetails").DataTable();
                var tr = $(this).closest("tr");
                var row = t1.row(tr);
                var data = JSON.parse(JSON.stringify(row.data()));
                //alert(data[0]);
                row.remove().draw();
                t2.row.add(data).draw();

                multInputsexportinvoice();
            });
        },
        //select: {
        //    style: 'os',
        //    selector: 'td:first-child'
        //},
        //'columnDefs': [
        //    {
        //        'targets': 0,
        //        'checkboxes': {
        //            'selectRow': true
        //        }
        //    }
        //],

        //'select': {
        //    'style': 'multi'
        //},

        "bFilter": true,
        //"bSort": true,
        "bInfo": true,
        "async": false,
        "paging": true,
        "retrieve": true,
        "iDisplayLength": 20,
        "lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],
        //"scrollX": true,
        //"scrollCollapse": true,
        rowCallback: function (row) {
            $(row).addClass('txtMultExportInvoice');
        }
        //,select: "multi"
    })



    //function myCallbackFunctionPackingList(updatedCell, updatedRow, oldValue) {
    //    alert('test hits');

    //    console.log("The new value for the cell is: " + updatedCell.data());
    //    console.log("The old value for that cell was: " + oldValue);
    //    console.log("The values for each cell in that row are: " + updatedRow.data());
    //    //console.log("The values One cell in that row are: " + updatedRow.data()[3]);
    //    //console.log("The values One cell in that row are: " + updatedRow.data()[4]);

    //    //var quantity = updatedRow.data()[11];
    //    //var unitprice = updatedRow.data()[12];
    //    //alert(quantity);
    //    //alert(unitprice);

    //    multInputpackinglist();


    //    //$(document).ready(function () {
    //    //    $(".txtMult").keyup(multInputs);


    //    //    $(".input").focus(function () {
    //    //        $(this).parent().addClass("focus");
    //    //    })

    //    //});

    //}


    //tblExportInvoicePackingList.on('keyup', '.Qtyn', function () {
    //        var newRrow = $(this).closest("tr");
    //        var v1 = $(this).val();
    //        var v2 = newRrow.find('.UnitPricen').val();
    //        newRrow.find('.TotalVlaue').text(v1 * v2);
    //    });




    function AddPackngList() {

        var check = $('#tblExportInvoice').find('input[type=checkbox]:checked').length;

        if (check > 0) {
            //alert(check);
            //alert("Checkbox Selected");
        }
        else {
            alert("At least One Row Should Be Selected");
            e.preventDefault();
        }
       // alert(serialno);
        // alert('test');
        $('#tblExportInvoicePackingList').dataTable().fnAddData([
             0,
            newMasterLCDetailsId,
            newDetailsId,
            newOrderNo,
            0,
            0,
            0,
            0,
            newUnitPrice,
            0,

            '<a data-itemId="0" href="#" class="dlttrash deleteItem"> <i class="fa fa-trash"></i></a >',
            false

            //'<input type="text" class="form-control CartonQtyn" value=""/>',
            //'<input type="text" class="form-control ItemNumbern" value=""/>',
            //'<input type="text" class="form-control UPCNumbern" value=""/>',
            //'<input type="text" class="form-control Qtyn" value=""/>',
            //'<input type="text" class="form-control UnitPricen" value="' + newUnitPrice + '"/>',
            //''
        ]);
    }





     function ShowAllPackingList() {
        var cbs = document.getElementsByClassName("clickchk");
        for (var i = 0; i < cbs.length; i++) {
            cbs[i].checked = false;
        }

        $('#tblExportInvoicePackingList tbody tr').each(function () {
                $(this).show();
        });

    }





    //function cbChange(obj) {


    //    //obj.checked = true;
    //    ////console.log(obj);


    //    //var table = $('#tbl').DataTable();
    //    ////var tableserial = $('#tblserial').DataTable();
    //    //var data = null;

    //    //console.log(obj);
    //    //alert(obj.rowIndex)
    //    //alert($(this).index());



    //    var cell;
    //    if (obj.checked == true) {

    //        data = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).data();
    //        var dataindex = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).index();
    //        var InvoiceQty = data[7];
    //        cell = tblExportInvoice.cell(dataindex, 11);

    //        cell.data(parseFloat(InvoiceQty));


    //    }
    //    else {

    //        //var cbs = document.getElementsByClassName("clickchk");
    //        //cell = tblExportInvoice.cell(i, 11);

    //        ////console.log(cbs);
    //        //for (var i = 0; i < cbs.length; i++) {

    //        //    if (cbs[i].checked == false && cell.data() > 0) {


    //        //        cell.data(parseFloat(0));

    //        //    };
    //        //}


    //        //data = tblExportInvoice.row($('input[type=checkbox]:').parents('tr')).data();
    //        //var dataindex = tblExportInvoice.row($('input[type=checkbox]:false').parents('tr')).index();
    //        //var cell = tblExportInvoice.cell(dataindex, 11);
    //        //cell.data(parseFloat(0));

    //    }
    //    multInputsexportinvoice();


    //}


    $(document).ready(function () {

        ///problem



        //tblExportInvoice.rows().every(function () {
        //    if (this.data()[0].includes('checked="checked"')) {
        //        this.select();
        //    } else {
        //        this.deselect();
        //    }
        //});




        //$('#tblExportInvoice input[type="checkbox"]').click(function () {

        //    data = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).data();

        //    var checkboxvalue = data[0];


        //    alert(checkboxvalue);
        //    //console.log(data);

        //    //alert(data[3]);
        //    //var termsid = data[0];
        //    var InvoiceQty  = data[7];

        //    alert(InvoiceQty);

        //    var the_row = tblExportInvoice.row($(this).parents('tr'))
        //    // this updates the display value to "foo"
        //    tblExportInvoice.cell({ row: the_row.index(), column: 11 }).data(InvoiceQty).draw()
        //    multInputsexportinvoice();


        //});

        //$('#tblExportInvoice').on('click', 'input[type="checkbox"]', function () {
        //    console.log('best', 'click');
        //})


        tblExportInvoice = $('#tblExportInvoice').DataTable();
        tblExportInvoice.MakeCellsEditable({
            "onUpdate": myCallbackFunction,
            "inputCss": 'my-input-class',
            "columns": [ 11,12 , 14 , 15 , 16, 17 , 18 , 19,20,21,22],
            "allowNulls": {
                "columns": [11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22],
                "errorClass": 'error'
            },
            "inputTypes": [
                {
                    "column": 11,
                    "type": "int",
                    "options": null
                },
                {
                    "column": 19,
                    "type": "datepicker-confirm",
                    "options": {
                        "icon": "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif" // Optional
                    }
                },
                //{
                //    "column": 15,
                //    "type": "text",
                //    "options": null
                //},
                //{
                //    "column": 16,
                //    "type": "text",
                //    "options": null
                //},
                //{
                //    "column": 17,
                //    "type": "text",
                //    "options": null
                //}

            ]
        });

        var row; var col;
        $('#tblExportInvoicePackingList tbody').on('click', '.dlttrash', function () {
            tblExportInvoicePackingList = $('#tblExportInvoicePackingList').DataTable();
            ///fahad is delete code
            // ///fahad for checking.
            //table.row($(this).parents('tr')).remove().draw();
            row = $(this).parent().parent().index();
            var cell = tblExportInvoicePackingList.cell(row, 11);
            cell.data('True');
            alert(row);
            var cellpackinglist = tblExportInvoicePackingList.cell(row, 0);
            alert(cellpackinglist.data());

            if (cellpackinglist.data() > 0) {
                $(this).parent().parent().hide();
            }
            else {
                tblExportInvoicePackingList.row($(this).parents('tr')).remove().draw();
            }

            //console.log($(this).children(":first").text());
            //var packinglistid = table.cell(row, 1).val();
            ///alert(table.rows[2].cells[1].innerHTML);
            //alert(packinglistid);

            alert('Row Deleted');

            //var x = "400.00";
            //var y = $('#tblExportInvoicePackingList').height();
            //var z = parseFloat(x) + parseFloat(y);

            //$("html, body").animate({ scrollTop: z }, 500);

        });


        var tblExportInvoicePackingList = $('#tblExportInvoicePackingList').dataTable({
            "aoColumns": [
                { "sClass": "ExportInvoicePackingListId", "visible": false },
                { "sClass": "ExportInvoiceMasterLCDetailsId", "visible": true },
                { "sClass": "ExportInvoiceDetailsId", "visible": false },
                { "sClass": "ExportInvoiceExportPoNo", "visible": true },
                {
                    "sClass": "CartonQty",
                    "visible": true
                },
                {
                    "sClass": "ItemNumber",
                    "visible": true
                },
                { "sClass": "UPCNumber", "visible": true },
                {
                    "sClass": "Qty",
                    "visible": true
                },
                { "sClass": "UnitPrice", "visible": true },
                { "sClass": "TotalValue", "visible": true },
                { "sClass": "dltrashimage", "visible": true },
                { "sClass": "isDelete", "visible": true }


            ],
            rowCallback: function (row) {
                $(row).addClass('txtMultpackinglist');
            },
            paging: false,
            sorting: false
        });


        tblExportInvoicePackingList = $('#tblExportInvoicePackingList').DataTable();
        tblExportInvoicePackingList.MakeCellsEditable({
            "onUpdate": myCallbackFunction,
            "inputCss": 'my-input-class',
            "columns": [4, 5, 6, 7],
            "allowNulls": {
                "columns": [4, 5, 6, 7],
                "errorClass": 'error'
            },
            "inputTypes": [
                {
                    "column": 4,
                    "type": "int",
                    "options": null
                },
                {
                    "column": 5,
                    "type": "text",
                    "options": null
                },
                {
                    "column": 6,
                    "type": "text",
                    "options": null
                },
                {
                    "column": 7,
                    "type": "text",
                    "options": null
                }

            ]
        });




        function myCallbackFunction(updatedCell, updatedRow, oldValue) {

            //alert('test call back function');

            console.log("The new value for the cell is: " + updatedCell.data());
            console.log("The old value for that cell was: " + oldValue);
            console.log("The values for each cell in that row are: " + updatedRow.data());
            //console.log("The values One cell in that row are: " + updatedRow.data()[3]);
            //console.log("The values One cell in that row are: " + updatedRow.data()[4]);

            //var quantity = updatedRow.data()[11];
            //var unitprice = updatedRow.data()[12];
            //alert(quantity);
            //alert(unitprice);


            multInputsexportinvoice();
            multInputpackinglist();

            //$(document).ready(function () {
            //    $(".txtMult").keyup(multInputs);


            //    $(".input").focus(function () {
            //        $(this).parent().addClass("focus");
            //    })

            //});

        }


        //tblExportInvoice.draw();
        tblExportInvoice.draw(true);
        tblExportInvoicePackingList.draw(true);

        ///need to check by fahad

        //$('#tblExportInvoice tr').click(function (e) {



        //    var data = null;
        //    var $checkbox = $(this).find('input');
        //    var invoiceqtyf = $(this).find('.InvoiceQty');
        //    var LCQtyf = $(this).find('.LCQty');


        //    var isChecked = $checkbox.prop('checked');

        //    if (isChecked) {

        //        //alert('checked');
        //        //alert(LCQtyf.text().replace(/[\$,]/g, ''));


        //        invoiceqtyf.text(LCQtyf.text().replace(/[\$,]/g, ''));

        //        //data = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).data();

        //        //var dataindex = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).index();
        //        //var InvoiceQty = data[7];
        //        //cell = tblExportInvoice.cell(dataindex, 11);

        //        //cell.data(parseFloat(InvoiceQty));
        //        //$checkbox.removeProp('checked');
        //    }
        //    else {
        //        invoiceqtyf.text('0');
        //        //alert('not checked');

        //        //data = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).data();

        //        //var dataindex = tblExportInvoice.row($('input[type=checkbox]:checked').parents('tr')).index();
        //        //var InvoiceQty = data[7];
        //        //cell = tblExportInvoice.cell(dataindex, 11);

        //        //cell.data(parseFloat(0));

        //        //$checkbox.prop('checked', 'checked');
        //    }
        //});











        //multInputsexportinvoice();

        //GroupLC_load();



        multInputsexportinvoice();

        //if ($('#MasterLCId').val() > 0) {

        //    MasterLC_Info();
        //    NotifyParty_Info();
        //}



        //alert($('h2').text());


        if ($('#InvoiceId').val() > 0) {

            $('#MasterLCId').attr("disabled", true);
            $('#btnmusterlcid').attr("disabled", true);

            if ($('#MasterLCId').val() > 0) {

                MasterLC_Info();

            }

        }
        else {

            if ($('#MasterLCId').val() > 0) {

                MasterLC_Info();
                NotifyParty_Info();
            }

        }






    });






        function ExportInvoice_save() {
            // Step 1: Read View Data and Create JSON Object
            if (!$("#myform").valid()) {
                alert('Please Fill Up All Necessary Information Correctly.');
                return false;
            }

            var ExportInvoicePackingListSingle = {
                "ExportInvoicePackingListId": "",
                "MasterLCDetailsId": "",
                "ExportInvoiceDetailsId": "",
                "CartonQty": "",
                "ItemNumber": "",
                "UPCNumber": "",
                "Qty": "",
                "UnitPrice": "",
                "TotalValue": "",
                "isDelete": ""

            };
            // Creating Detail Json Object , "DeliveryTerm": ""
            var ExportInvoiceDetail = {
                "ExportInvoiceDetailsId": "", "InvoiceId": "", "MasterLCDetailsID": "", "StyleNo": "", "ExportPoNo": "", "LCQty": "", "UnitMasterId": "", "InvoiceQty": "", "InvoiceRate": "", "InvoiceValue": "", "Destination": "", "ShipmentDate": "", "GrossWeightLine": "",
                "NetWeightLine": "", "CBMLine": "", "CartonQty": "",
                "ColorCode": "", "PODate": "", "BoxLength": "", "BoxWidth": "", "BoxHeight": "",
                "ExportInvoicePackingLists": []
            };






            var ExportInvoiceMaster = {
                "userid": "", "useridUpdate": "", "DateAdded": "", "DateUpdated": "",

                "InvoiceId": "", "InvoiceNo": "", "InvoiceDate": "", "TotalShipped": "", "BalanceShip": "", "MasterLCId": "", "BuyerId": "", "BuyerGroupId": "", "FirstNotifyPartyId": "", "SecoundNotifyPartyId": "", "ThirdNotifyPartyId": "", "TradeTermId": "", "PortOfLoadingId": "", "PortOfDischargeId": "",
                "DestinationId": "", "ShipModeId": "", "ExfactoryDate": "", "OnboardDate": "", "ExpNo": "", "ExpDate": "", "VesselName": "", "VoyageNo": "", "BLNo": "", "BLDate": "", "BookingNo": "", "BookingDate": "", "GoodsDescription": "", "CartonMeasurement": "", "MainMark": "", "TotalInvoiceQty": "",
                "Rate": "", "TotalValue": "", "CommercialCompanyId": "", "ManufactureId": "", "ShipmentAuthorization": "", "Remarks": "", "SupplierId": "", "Discount": "", "CMPPercentage" :"", "CargoHandoverDate": "" ,
                "NetWeight": "", "GrossWeight": "", "CBM": "", "TotalCartonQty": "", "PackingType": "",
                "ExportInvoiceDetails": []
            };


            ExportInvoiceMaster.userid = $("#userid").val() || 0;
            ExportInvoiceMaster.useridUpdate = $("#useridUpdate").val() || 0;
            ExportInvoiceMaster.DateAdded = $("#DateAdded").val();
            ExportInvoiceMaster.DateUpdated = $("#DateUpdated").val();
            // Creating Masters Json Object

            // Set Invoice Main Value
            ExportInvoiceMaster.InvoiceId = $("#InvoiceId").val();
            ExportInvoiceMaster.InvoiceNo = $("#InvoiceNo").val();

            ExportInvoiceMaster.InvoiceDate = $("#InvoiceDate").val();
            //ExportInvoiceMaster.DeliveryTerm = $("#DeliveryTerm").val();
            ExportInvoiceMaster.TotalShipped = $("#TotalShipped").val();
            ExportInvoiceMaster.BalanceShip = $("#BalanceShip").val();
            ExportInvoiceMaster.MasterLCId = $("#MasterLCId").val();

            ExportInvoiceMaster.BuyerId = $("#BuyerId").val();
            ExportInvoiceMaster.BuyerGroupId = $("#BuyerGroupId").val();


            ExportInvoiceMaster.FirstNotifyPartyId = $("#FirstNotifyPartyId").val() || 0;
            ExportInvoiceMaster.SecoundNotifyPartyId = $("#SecoundNotifyPartyId").val() || 0;
            ExportInvoiceMaster.ThirdNotifyPartyId = $("#ThirdNotifyPartyId").val() || 0;

            ExportInvoiceMaster.TradeTermId = $("#TradeTermId").val();


            ExportInvoiceMaster.PortOfLoadingId = $("#PortOfLoadingId").val();
            ExportInvoiceMaster.PortOfDischargeId = $("#PortOfDischargeId").val();

            ExportInvoiceMaster.DestinationId = $("#DestinationId").val();
            ExportInvoiceMaster.ShipModeId = $("#ShipModeId").val();
            ExportInvoiceMaster.ExfactoryDate = $("#ExfactoryDate").val();
            ExportInvoiceMaster.OnboardDate = $("#OnboardDate").val();
            ExportInvoiceMaster.ExpNo = $("#ExpNo").val();
            ExportInvoiceMaster.ExpDate = $("#ExpDate").val();


            ExportInvoiceMaster.VesselName = $("#VesselName").val();
            ExportInvoiceMaster.VoyageNo = $("#VoyageNo").val();


            ExportInvoiceMaster.BLNo = $("#BLNo").val();
            ExportInvoiceMaster.BLDate = $("#BLDate").val();

            ExportInvoiceMaster.BookingNo = $("#BookingNo").val();
            ExportInvoiceMaster.BookingDate = $("#BookingDate").val();

            ExportInvoiceMaster.GoodsDescription = $("#GoodsDescription").val();
            ExportInvoiceMaster.CartonMeasurement = $("#CartonMeasurement").val();
            ExportInvoiceMaster.MainMark = $("#MainMark").val();

            ExportInvoiceMaster.TotalInvoiceQty = $("#TotalInvoiceQty").val();
            ExportInvoiceMaster.Rate = $("#Rate").val();
            ExportInvoiceMaster.TotalValue = $("#TotalValue").val();
            ExportInvoiceMaster.CommercialCompanyId = $("#CommercialCompanyId").val();
            ExportInvoiceMaster.ManufactureId = $("#ManufactureId").val();
            ExportInvoiceMaster.ShipmentAuthorization = $("#ShipmentAuthorization").val();
            ExportInvoiceMaster.Remarks = $("#Remarks").val();




            ExportInvoiceMaster.SupplierId = $("#SupplierId").val();

            ExportInvoiceMaster.NetWeight = $("#NetWeight").val();
            ExportInvoiceMaster.GrossWeight = $("#GrossWeight").val();
            ExportInvoiceMaster.CBM = $("#CBM").val();
            ExportInvoiceMaster.TotalCartonQty = $("#TotalCartonQty").val();
            ExportInvoiceMaster.PackingType = $("#PackingType").val();

            ExportInvoiceMaster.Discount = $("#Discount").val();
            ExportInvoiceMaster.CMPPercentage = $("#CMPPercentage").val();

            ExportInvoiceMaster.CargoHandoverDate = $("#CargoHandoverDate").val();




            ////Invoice subs data
            var oTable = $('#tblExportInvoice').dataTable().fnGetData();
            for (var i = 0; i < oTable.length; i++) {
                //alert(oTable.length);
                //var oTableRow = oTable[i];
                //alert(oTableRow);
                //alert($('h2').text());
                // IF This view is for edit then it will read InvoiceId from Hidden field
                if (oTable[i][11] > 0) {

                    if ($('h2').text() == "Export Invoice Edit") {
                        ExportInvoiceDetail.InvoiceId = $('#InvoiceId').val();



                    }
                    else {

                        ExportInvoiceDetail.InvoiceId = 0;

                    }

                    //alert('found');

                    ExportInvoiceDetail.ExportInvoiceDetailsId = oTable[i][1];

                    ExportInvoiceDetail.MasterLCDetailsID = oTable[i][2];
                    ExportInvoiceDetail.StyleNo = oTable[i][3];
                    ExportInvoiceDetail.ExportPoNo = oTable[i][4];
                    ExportInvoiceDetail.Destination = oTable[i][6];
                    ExportInvoiceDetail.ShipmentDate = oTable[i][5];
                    ExportInvoiceDetail.LCQty = oTable[i][7];
                    ExportInvoiceDetail.UnitMasterId = oTable[i][8];

                    ///alert(oTable[i][11]);
                    ExportInvoiceDetail.InvoiceQty = oTable[i][11];
                    ExportInvoiceDetail.InvoiceRate = oTable[i][12];
                    ExportInvoiceDetail.InvoiceValue = (oTable[i][11] * oTable[i][12]).toFixed(3);//oTable[i][13]; /// need to give solution by fahad

                    ExportInvoiceDetail.GrossWeightLine = oTable[i][14];
                    ExportInvoiceDetail.NetWeightLine = oTable[i][15];

                    ExportInvoiceDetail.CartonQty = oTable[i][17];



                    ExportInvoiceDetail.ColorCode= oTable[i][18];
                    ExportInvoiceDetail.PODate  = oTable[i][19];
                    ExportInvoiceDetail.BoxLength = oTable[i][20];
                    ExportInvoiceDetail.BoxWidth = oTable[i][21];
                    ExportInvoiceDetail.BoxHeight = oTable[i][22];

                    if (oTable[i][20] > 0 && oTable[i][21] > 0 && oTable[i][22] > 0 && oTable[i][17] > 0)
                    {
                        ExportInvoiceDetail.CBMLine =   (oTable[i][20] * oTable[i][21] * oTable[i][22] * oTable[i][17]) / 1000000;

                    }
                    else {
                        ExportInvoiceDetail.CBMLine = oTable[i][16];
                    }


                    //var rows =   $("#tblExportInvoicePackingList").dataTable().fnGetNodes();
                    //var arr = [];
                    //for (var k = 0; k < rows.length; k++) {
                    //    var cells = rows[k].cells;
                    //    //var select = cells[1].children[0].value;
                    //    var select = cells[1].data();
                    //    alert(select);
                    //    //if (cells[0].children[0].checked) {
                    //    //    select = cells[0].children[0].value;
                    //    //} else {
                    //    //    select = 'off';
                    //    //}
                    //}



                    //alert('maybe ok');

                    var oTablePackingList = $('#tblExportInvoicePackingList').dataTable().fnGetData();
                    console.log(oTablePackingList);
                    //alert('checking.');

                    for (var ii = 0; ii < oTablePackingList.length; ii++) {

                        //alert($('h2').text());
                        //alert();

                        if (oTablePackingList[ii][0] == 0 && oTablePackingList[ii][11] == 'True') {
                            //alert('passed');
                        }
                        else {


                            if (ExportInvoiceDetail.MasterLCDetailsID == oTablePackingList[ii][1]) {

                                ///IF This view is for edit then it will read SalesId from Hidden field
                                if ($('h2').text() == "Export Invoice Edit") {

                                    //ExportInvoiceDetail.TermsId = $('#TermsId').val();


                                    ExportInvoicePackingListSingle.ExportInvoicePackingListId = oTablePackingList[ii][0];
                                    //alert()

                                    //alert('test');
                                    //alert(Termssub.TermsId);
                                }
                                else {
                                    ExportInvoicePackingListSingle.ExportInvoicePackingListId = 0;
                                }

                                //aTable.cell(0, 2).nodes().to$().find('input').val();


                                //ExportInvoicePackingListSingle.ExportInvoicePackingListId = oTablePackingList[ii][0];
                                //ExportInvoicePackingListSingle.MasterLCDetailsId = oTablePackingList[ii][1];
                                //ExportInvoicePackingListSingle.ExportInvoiceDetailsId = oTablePackingList[ii][2];
                                ExportInvoicePackingListSingle.ExportInvoiceDetailsId = ExportInvoiceDetail.ExportInvoiceDetailsId;

                                ExportInvoicePackingListSingle.ExportPoNo = oTablePackingList[ii][3];
                                ExportInvoicePackingListSingle.CartonQty = oTablePackingList[ii][4];
                                ExportInvoicePackingListSingle.ItemNumber = oTablePackingList[ii][5];
                                ExportInvoicePackingListSingle.UPCNumber = oTablePackingList[ii][6];
                                ExportInvoicePackingListSingle.Qty = oTablePackingList[ii][7];
                                ExportInvoicePackingListSingle.UnitPrice = oTablePackingList[ii][8];

                                //alert(oTablePackingList[ii][9]);
                                ExportInvoicePackingListSingle.TotalValue = oTablePackingList[ii][7] * oTablePackingList[ii][8];

                                ExportInvoicePackingListSingle.isDelete = oTablePackingList[ii][11];


                                //alert('ok')
                                //Serialsub.SerialNo = oTablePackingList[ii][2];

                                //adding to SalesMain.SalesSub List Item
                                //Termssub.TermsSerialsubs.push(Serialsub);

                                ExportInvoiceDetail.ExportInvoicePackingLists.push(ExportInvoicePackingListSingle);
                                console.log(ExportInvoiceDetail);
                                //alert('Final Check');

                                ExportInvoicePackingListSingle = {
                                    "ExportInvoicePackingListId": "",
                                    "MasterLCDetailsId": "",
                                    "ExportInvoiceDetailsId": "",
                                    "CartonQty": "",
                                    "ItemNumber": "",
                                    "UPCNumber": "",
                                    "Qty": "",
                                    "UnitPrice": "",
                                    "TotalValue": "",
                                    "isDelete": ""
                                };

                            }
                            else {


                            }
                        }




                        //    //alert('reached');
                        //    //console.log(Termsmain);
                        //    //console.log(TermsSubs);
                        //    //console.log(Serialsubs);





                        //}





                    }
                    ExportInvoiceMaster.ExportInvoiceDetails.push(ExportInvoiceDetail);


                    var ExportInvoiceDetail = {
                        "ExportInvoiceDetailsId": "", "InvoiceId": "", "MasterLCDetailsID": "", "StyleNo": "", "ExportPoNo": "", "LCQty": "", "UnitMasterId": "", "InvoiceQty": "", "InvoiceRate": "", "InvoiceValue": "", "Destination": "", "ShipmentDate": "", "GrossWeightLine": "",
                        "NetWeightLine": "", "CBMLine": "", "CartonQty": "",
                        "ColorCode": "", "PODate": "", "BoxLength": "", "BoxWidth": "", "BoxHeight": "",
                        "ExportInvoicePackingLists": []
                    };

                }
            }

            // Step 1: Ends Here
            // alert('4');
            console.log(ExportInvoiceMaster);
            //alert('checking');


            // Set 2: Ajax Post
            // Here i have used ajax post for saving/updating information
            $.ajax({
                //url: '/COM_MasterLC/Create',
                url: '@Url.Action("Create", "ExportInvoiceMasters")',

                data: JSON.stringify(ExportInvoiceMaster),
                type: 'POST',
                contentType: 'application/json;',
                async: true,
                dataType: 'json',

                success: function (result) {


                    if (result.Success == "1") {
                        toastr.success('Data Save Successfully');
                        //window.location.href = "/Invoice/index";

                        window.setTimeout(function () {

                            // Move to a new location or you can do something else
                            window.location.href = '@Url.Action("Index", "ExportInvoiceMasters")';

                        }, 500);


                    }
                    else {
                        //alert(result.ex);
                        toastr.error(result.ex)
                    }
                },
                error: function (result) {
                    //toastr.error(result.errors);

                    if (result.errors = "") {
                        toastr.error("Unable To Save");
                    } else {
                        toastr.error(result.errors);

                    }
                }


            });


        }





    function FinalDestination() {
        var DestinationName=$("#Destination_DestinationName").val();
        var DestinationCode=$("#Destination_DestinationCode").val();
        var CountryId = $(".countryDestination").val();

        var destination = {
            DestinationName: DestinationName,
            DestinationCode: DestinationCode,
            CountryId:CountryId
        }

        $.ajax({
            url: '@Url.Action("SaveDestination", "ExportInvoiceMasters")',
             data: JSON.stringify(destination), //use id here
            //data: JSON.stringify(salesmain),
            type: 'POST',
            async: true,
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                //alert(result);
                //$("#BuyerId").val();
                $("#Destination_DestinationName").val("");
                $("#Destination_DestinationCode").val("");
                $(".countryDestination").val(0)



                $("#DestinationId").append(`<option value="${result.DestinationId}">
                                       ${result.DestinationName}
                                  </option>`);


                  //NotifyParty_Info();
            },
            error: function () {
                toastr.error('Unable to Add');

            }
        });
    }

    function PortOfDischarge() {
        var PortOfDischargeName=$("#PortOfDischarge_PortOfDischargeName").val();
        var PortCode = $("#PortOfDischarge_PortCode").val();
        var CountryId = $(".countryDischarge").val();

        var portOfDischarge = {
            PortOfDischargeName: PortOfDischargeName,
            PortCode: PortCode,
            CountryId:CountryId
        }

        $.ajax({
            url: '@Url.Action("SavePortOfDischarge", "ExportInvoiceMasters")',
             data: JSON.stringify(portOfDischarge), //use id here
            //data: JSON.stringify(salesmain),
            type: 'POST',
            async: true,
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                //alert(result);
                //$("#BuyerId").val();
                $("#PortOfDischarge_PortOfDischargeName").val("");
                $("#PortOfDischarge_PortCode").val("")
                $(".countryDischarge").val(0)


                $("#PortOfDischargeId").append(`<option value="${result.PortOfDischargeId}">
                                       ${result.PortOfDischargeName}
                                  </option>`);

                  //NotifyParty_Info();
            },
            error: function () {
                toastr.error('Unable to Add');
            }
        });
    }

    function PortOfLoading() {
        var PortOfLoadingName=$("#PortOfLoading_PortOfLoadingName").val();
        var PortCode=$("#PortOfLoading_PortCode").val();
        var CountryId = $("#CountryId").val();

        var portOfLoading = {
            PortOfLoadingName: PortOfLoadingName,
            PortCode: PortCode,
            CountryId:CountryId
        }

        $.ajax({

            url: '@Url.Action("SavePortOfLoading", "ExportInvoiceMasters")',
             data: JSON.stringify(portOfLoading), //use id here
            //data: JSON.stringify(salesmain),
            type: 'POST',
            async: true,
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                //alert(result);
                //$("#BuyerId").val();
                $("#PortOfLoading_PortOfLoadingName").val("");
                $("#PortOfLoading_PortCode").val("")
                $("#CountryId").val(0)

                $("#PortOfLoadingId").append(`<option value="${result.PortOfLoadingId}">
                                       ${PortOfLoadingName}
                                  </option>`);

                  //NotifyParty_Info();
            },
            error: function () {
                toastr.error('Unable to Add');

            }
        });
    }

    function SaveNotifyParty() {
        var BuyerId=$("#BuyerId").val();
        var NotifyPartyName=$("#NotifyPartyName").val();
        var Address1=$("#NotifyPartyAddress1").val();
        var Address2 = $("#NotifyPartyAddress2").val();
        var CountryId = $(".countryNotifyParty").val();






        var notifyParty = {
            BuyerId: BuyerId,
            NotifyPartyName: NotifyPartyName,
            Address1: Address1,
            Address2: Address2,
            CountryId: CountryId
        }

        //alert(`${BuyerId} ${NotifyPartyName} ${Address1} ${Address2}`);

         $.ajax({

            url: '@Url.Action("SaveNotifyParty", "ExportInvoiceMasters")',
             data: JSON.stringify(notifyParty), //use id here
            //data: JSON.stringify(salesmain),
            type: 'POST',
            async: true,
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                //alert(result);
                //$("#BuyerId").val();
                $("#NotifyPartyName").val("");
                $("#NotifyPartyAddress1").val("");
                $("#NotifyPartyAddress2").val("");

                  NotifyParty_Info();
            },
            error: function () {
                toastr.error('Unable to Save');
            }
        });
    }


</script>
