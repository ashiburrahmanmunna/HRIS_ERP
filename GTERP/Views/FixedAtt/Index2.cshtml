@model GTERP.Controllers.HR.FixedAttController.AttFixGrid
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery AntiForgery


@{

}
<style>
    .dataTables_scrollBody {
        border-bottom: none !important;
    }

    .set {
        border-radius: .2em;
        border: 1px solid #cccccc;
        padding: 10px;
        margin-bottom: 2px;
        -webkit-transition: border linear .2s, box-shadow linear .2s;
        -moz-transition: border linear .2s, box-shadow linear .2s;
        -o-transition: border linear .2s, box-shadow linear .2s;
        transition: border linear .2s, box-shadow linear .2s;
    }

        .set:hover {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        }

    .loading {
        width: 100px;
        height: 100px;
        position: fixed;
        left: 50%;
        top: 50%;
        margin-top: -50px;
        margin-left: -50px;
    }

    .selectedRow {
        background: #c6b99f;
    }

    .editable {
        color: black;
        border: solid 1px white;
        border-radius: 4px;
    }

    .inp {
        text-align: center;
    }

    .myMessage {
        position: fixed;
        display: none;
        left: 50%;
        top: 50%;
        margin-top: -100px;
        -webkit-transform: translateX(-50%);
        -moz-transform: translateX(-50%);
        min-width: 200px;
        width: 30%;
        text-align: center;
        z-index: 100;
    }


    #fixAttGridhd, #fixAttGrid {
        border-collapse: collapse;
        table-layout: fixed;
        width: 100%;
    }

        #fixAttGrid th, #fixAttGrid td, #fixAttGridhd th, #fixAttGridhd td {
            text-align: center;
            overflow: visible;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        #fixAttGridhd th {
            font-weight: bold;
            height: 25px;
        }

        #fixAttGridhd tbody td {
            text-align: center;
            height: 25px;
            padding-left: 1px;
            padding-right: 1px;
        }

    .pane-hScroll {
        overflow: auto;
        width: 100%;
    }

    .pane-vScroll {
        overflow-y: auto;
        overflow-x: hidden;
        height: 60vh;
    }
    /* Newly added */
    .input-group .form-control {
        position: relative;
        z-index: 2;
        float: left;
        width: 100%;
        margin-bottom: 0;
    }

    .form-control {
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        background-image: none;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }

    button, input, select, textarea {
        font-family: inherit;
    }

    button, input, optgroup, select, textarea {
        margin: 0;
        font: inherit;
    }

    .panel-body {
        padding: 5px;
    }

    .form-group {
        margin-bottom: 0px;
    }

    .content {
        padding-top: 75px;
        padding-bottom: 15px;
        margin-bottom: 10px;
    }
</style>


<div class="panel" style="font-size: 10px">
    <h4 class="form-header">
        <span class="glyphicon glyphicon-wrench"> </span> Fix Attendance
    </h4>

    <div class="panel-body">
        <div class="row">
            <div class="col-lg-3 col-md-3 col-sm-12 leftDiv">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "myform" }))
                {
                    <div class="set">
                        <div class="set" style="padding: 5px">
                            <table style="width: 100%">
                                <colgroup>
                                    <col style="width: 40%" />
                                    <col style="width: 60%" />
                                </colgroup>
                                <tr>
                                    <td>
                                        @Html.LabelFor(model => model.DtFrom, new { @class = "control-label" })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.DtFrom, new { @class = "form-control" })
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td>
                                        @Html.ValidationMessageFor(model => model.DtFrom, "", new { @style = "color:red" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Html.LabelFor(model => model.DtTo, new { @class = "control-label" })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.DtTo, new { @class = "form-control" })
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td>
                                        @Html.ValidationMessageFor(model => model.DtTo, "", new { @style = "color:red" })
                                    </td>
                                </tr>
                            </table>

                        </div>
                        <input type="hidden" name="totalShowLimit" id="totalShowLimit" />
                        <div class="set" style="text-align: center">
                            <div style="display: inline-block">
                                <button type="submit" id="refreshBtn" class="btn btn-warning">
                                    <span class="glyphicon glyphicon-refresh"> </span> Refresh List
                                </button>
                            </div>
                        </div>

                        <div class="set" style="padding: 10px">

                            <div class="form-horizontal">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Criteria, new { @class = "control-label col-md-12 col-lg-12 col-sm-12", @style = "text-align:left;" })
                                    <div class="col-md-12 col-lg-12 col-sm-12" style="font-size: 11px;">
                                        @Html.RadioButtonFor(m => m.Criteria, "All", new { @checked = "checked" })
                                        All Employee
                                        @Html.RadioButtonFor(m => m.Criteria, "EmpID")
                                        Employee ID<br />
                                        @Html.RadioButtonFor(m => m.Criteria, "Sec")
                                        Section
                                        @Html.RadioButtonFor(m => m.Criteria, "Line")
                                        Line
                                        @Html.RadioButtonFor(m => m.Criteria, "ShiftTime")
                                        Shift Time<br />
                                        @Html.RadioButtonFor(m => m.Criteria, "Status")
                                        Status
                                        @Html.RadioButtonFor(m => m.Criteria, "Missing")
                                        Missing Out Time
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="set">
                            <div class="form-horizontal">
                                <div class="form-group">
                                    <label for="empIdSelect" class="control-label col-lg-4 col-sm-4">Emp Id:</label>
                                    <div class="col-lg-8 col-sm-8">
                                        <select id="empIdSelect" data-val="false" class="form-control" name="EmpId" disabled="disabled" asp-items="@ViewBag.EmpId"></select>
                                        @*<select id="empIdSelect" data-val="false" class="form-control" name="EmpId" disabled="disabled">
                                            <option value="">Employee</option>
                                            @foreach (var anEmp in ViewBag.EmpId)
                                            {
                                                <option value="@anEmp.EmpId" style="font-size: 10px;">@anEmp.EmpCode - @anEmp.EmpName</option>
                                            }
                                        </select>*@
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="sectSelect" class="control-label col-lg-4 col-sm-4">Section:</label>
                                    <div class="col-lg-8 col-sm-8">
                                        <select id="sectSelect" data-val="false" class="form-control" name="EmpId" disabled="disabled" asp-items="@ViewBag.Sections"></select>
                                        @*<select id="sectSelect" data-val="false" class="form-control" name="SectId" disabled="disabled">
                                            <option value="">Section</option>
                                            @foreach (var aSection in ViewBag.Sections)
                                            {
                                                <option value="@aSection.SectId" style="font-size: 10px">@aSection.SectName</option>
                                            }
                                        </select>*@
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="lineSelect" class="control-label col-lg-4 col-sm-4">Line :</label>
                                    <div class="col-lg-8 col-sm-8">
                                        <select id="lineSelect" data-val="false" class="form-control" name="EmpId" disabled="disabled" asp-items="@ViewBag.Lines"></select>
                                        @*<select id="lineSelect" data-val="false" class="form-control" name="Line" disabled="disabled">
                                            <option value="">Line</option>
                                            @foreach (var alines in ViewBag.Lines)
                                            {
                                                <option value="@alines.LineId" style="font-size: 10px">@alines.LineName</option>
                                            }
                                        </select>*@
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="shiftSelect" class="control-label col-lg-4 col-sm-4">Shift:</label>
                                    <div class="col-lg-8 col-sm-8">
                                        <select id="shiftSelect" data-val="false" class="form-control" name="EmpId" disabled="disabled" asp-items="@ViewBag.ShiftId"></select>
                                        @*<select id="shiftSelect" data-val="false" class="form-control" name="ShiftId" disabled="disabled">
                                            <option value="">Shift</option>
                                            @foreach (var aShift in ViewBag.ShiftId)
                                            {
                                                <option value="@aShift.ShiftId" style="font-size: 10px">@aShift.ShiftName</option>
                                            }
                                        </select>*@
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="statusSelect" class="control-label col-lg-4 col-sm-4">Status:</label>
                                    <div class="col-lg-8 col-sm-8">
                                        <select id="statusSelect" data-val="false" class="form-control" name="EmpId" disabled="disabled" asp-items="@ViewBag.StatusId"></select>
                                        @*<select id="statusSelect" data-val="false" class="form-control" name="Status" disabled="disabled">
                                            <option value="">Status</option>
                                            @foreach (var stts in ViewBag.StatusId)
                                            {
                                                <option value="@stts" style="font-size: 10px">@stts</option>
                                            }
                                        </select>*@
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                }
            </div> @*Left option container end*@

            <div class="col-sm-12 col-lg-6 col-md-6 set">
                <div id="fixAttGridDiv">
                    @Html.Partial("_FixAttendancGrid")
                    @*<partial name="_FixAttendancGrid" for="@Model" />*@
                </div>
            </div>@*Grid container end*@

            <div class="col-lg-3 col-md-3 col-sm-12">

                <div class="set">
                    <div class="set" id="leaveSetup" style="margin: 5px 0 5px 0;">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label for="timeIn" class="control-label col-sm-5">Time In:</label>
                                <div class="col-sm-7 input-group bootstrap-timepicker timepicker" id="divTime" style="padding: 0px 10px 0px 10px">
                                    <input type="text" class="editable inp form-control" id="timeIn" />
                                    <span class="input-group-addon">
                                        <input type="checkbox" id="timInChk" name="timeInChk">
                                    </span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="timeOut" class="control-label col-sm-5">Time Out:</label>
                                <div class="col-sm-7 input-group bootstrap-timepicker timepicker" id="divTime" style="padding: 0px 10px 0px 10px">
                                    <input type="text" class="editable inp form-control" id="timeOut" />
                                    <span class="input-group-addon">
                                        <input type="checkbox" id="timOutChk" name="timeOutChk">
                                    </span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="statusSelectrt" class="control-label col-sm-5">Status:</label>
                                <div class="col-sm-7 input-group" style="padding: 0px 10px 0px 10px">
                                    <select id="statusSelectrt" data-val="false" class="form-control" name="statusType">
                                        <option value="">Status</option>
                                        @foreach (var stts in ViewBag.StatusId)
                                        {
                                            <option value=@stts>@stts</option>
                                        }
                                    </select>
                                    <span class="input-group-addon">
                                        <input type="checkbox" id="statusChk" name="statusChk">
                                    </span>
                                </div>
                            </div>
                            <div id="allCheckedDiv" class="form-group">
                                <div class="col-lg-4 col-md-4 col-sm-4"></div>
                                <div class="col-lg-8 col-md-8 col-sm-8" style="padding: 0px 10px 0px 10px">
                                    <input type="checkbox" id="allChecked" name="allChecked"> All checked<br>
                                    @*<button id="checkbtn" class="btn" style="font-size: 12px; width:70%"><span class="glyphicon glyphicon-check"></span> Check All</button>*@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="set">
                        <center>
                            <button type="submit" id="fillDatabtn" class="btn btn-warning">
                                <span class="glyphicon glyphicon-retweet"> </span> Fill Data
                            </button>
                            <button type="submit" id="updateBtn" name="updateBtn" class="btn btn-success">
                                <span class="glyphicon glyphicon-check"> </span> Update
                            </button>
                        </center>
                    </div>
                </div>


            </div> @*Right option container end*@
        </div> @*Options Container end*@
    </div> @*Panel Body end*@
</div>  @*Panel end*@

<!--Modal-->
<div class="myMessage">
    <div id="msgDivWrapper" class="panel panel-primary">
        <div id="msgDivHeader" class="panel-heading"><h4 style="padding:0px; margin: 0px;">Message</h4></div>
        <div class="panel-body ajaxMessage"></div>
        <div id="msgDivFooter" class="panel-footer" style="padding: 5px 15px;">
            <button id="okBtn" type="button" class="btn btn-default">
                <span class="glyphicon glyphicon-remove"> </span> Close
            </button>
        </div>
    </div>
</div>
@*Appears during ajax call*@
<div id="progress" class="modal">
    <div class="center loading">
        <img id="loadingImage" src="~/Content/img/loading.gif" />
    </div>
</div>

<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/jquery-ajax-unobtrusive@3.2.4/jquery.unobtrusive-ajax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>

<script>
    var editMode = "Selective";   //"All" or "Selective" : whether all of the data is to be updated or not, All will not be used in this form
    function initScroller() {
        $('.pane-hScroll').scroll(function () {
            $('.pane-vScroll').width($('.pane-hScroll').width() + $('.pane-hScroll').scrollLeft());
        });
    }
    function TryParseInt(str, defaultValue) {
        var retValue = defaultValue;
        if (str !== null) {
            if (str.length > 0) {
                if (!isNaN(str)) {
                    retValue = parseInt(str);
                }
            }
        }
        return retValue;
    }
    function uncheckAllCheckBox() {
        $("input:checkbox[name=check_list]").prop('checked', false);

        $("input:checkbox[id=statusChk]").attr('checked', false);
        $("input:checkbox[id=timeOutChk]").attr('checked', false);
        $("input:checkbox[id=timeInChk]").attr('checked', false);

        $(".icheckbox_minimal-blue").attr("aria-checked", "false");
        $(".icheckbox_minimal-blue").removeClass("checked");
    }
    function initDatePicker() {
        $("#dtTo").datepicker({
            format: 'dd-M-yy',
            date: new Date(),
            autoclose: true
        }).datepicker("setDate", new Date());
        $("#dtFrom").datepicker({
            format: 'dd-M-yy',
            date: new Date(),
            autoclose: true
        }).datepicker("setDate", new Date());
    }

    var compare = function (filter, value, id) {
        var sign = $("#" + id).val();
        filter = TryParseInt(filter, filter);
        value = TryParseInt(value, value);
        if (sign === "=") {
            return value === filter ? 0 : -1;
        } else if (sign === ">") {
            return value > filter ? 0 : -1;
        } else if (sign === "<") {
            return value < filter ? 0 : -1;
        } else if (sign === ">=") {
            return value >= filter ? 0 : -1;
        } else if (sign === "<=") {
            return value <= filter ? 0 : -1;
        }
        return value;
    }

    function initDynamicTimePickers() {

        $("#searchTimeIn").timepicker({ showMeridian: false }).on('hide.timepicker', function (e) {
            mySearchFunction(this, "TimeIn", compare);
        });
        $("#searchTimeout").timepicker({ showMeridian: false }).on('changeTime.timepicker', function (e) {
            mySearchFunction(this, "TimeOut", compare);
        });

        $("input[id*='inpTimeOut']").timepicker({ showMeridian: false });
        $("input[id*='inpTimeIn']").timepicker({ showMeridian: false });
    }

    function modal(message, type) {
        if (type === "success") {
            $("#msgDivWrapper").css("border-color", "rgb(76, 181, 81)");
            $("#msgDivHeader").css("background-color", "#8fd045").css("border-color", "rgb(76, 181, 81)");
            $("#msgDivFooter").css("border-color", "#efefef");
        } else if (type === "error") {
            $("#msgDivWrapper").css("border-color", "#ff4500");
            $("#msgDivHeader").css("background-color", "rgb(241, 58, 36)").css("border-color", "#ff4500");
            $("#msgDivFooter").css("border-color", "#f4f4f4");
        } else {
            $("#msgDivWrapper").css("border-color", "#337ab7");
            $("#msgDivHeader").css("background-color", "#337ab7").css("border-color", "#337ab7");
            $("#msgDivFooter").css("border-color", "#f5f5f5");
        }
        $(".myMessage").show();
        $(".ajaxMessage").text(message);
        $("#okBtn").focus();
        $("#okBtn").on("click", function () {
            $(".myMessage").fadeOut(500);
        });
        $(document).mouseup(function (e) {
            var container = $(".myMessage");
            // if the target of the click isn't the container nor a descendant of the container
            if (!container.is(e.target) && container.has(e.target).length === 0) {
                container.fadeOut(500);
            }
        });
    }

    $("#refreshBtn").click(function() {
        $("#totalShowLimit").val(totalShowLimit);
    });

    /******************************************************/
    /*----------------------------------------------------*/
    /*Loading related codes start*/

    var gtable; //new
    var totalShowLimit = 30; //new
    var empArr = [];
    var empArrLen;
    var prevFilter = "";
    var resultShowLimit = 30;
    var resultShowCount;
    var resultArr = [];
    var resultArrLen;
    var isResult = false; //whether only results or all employees to show
    var visible = 0;
    var remain = 0;
    var AllStatus;

    function addRow(index) {     //into tbody
        var  isCheck,EmpId, EmpCode, EmpName, IsChecked, OtHour, Remarks,SectName, ShiftId, ShiftName, Status,TimeIn,TimeOut,dtPunch,Line;
        if (isResult) {
            IsChecked = resultArr[index].IsChecked;
            EmpId = resultArr[index].EmpId;
            EmpCode = resultArr[index].EmpCode;
            EmpName = resultArr[index].EmpName;
            OtHour = resultArr[index].OtHour;
            Remarks = resultArr[index].Remarks;
            SectName = resultArr[index].SectName;
            ShiftId = resultArr[index].ShiftId;
            ShiftName = resultArr[index].ShiftName;
            Status = resultArr[index].Status;
            TimeIn = resultArr[index].TimeIn;
            TimeOut = resultArr[index].TimeOut;
            dtPunch = resultArr[index].dtPunch;
            Line = resultArr[index].Line;
        }
        else {
            IsChecked = empArr[index].IsChecked;
            EmpId = empArr[index].EmpId;
            EmpCode = empArr[index].EmpCode;
            EmpName = empArr[index].EmpName;
            OtHour = empArr[index].OtHour;
            Remarks = empArr[index].Remarks;
            SectName = empArr[index].SectName;
            ShiftId = empArr[index].ShiftId;
            ShiftName = empArr[index].ShiftName;
            Status = empArr[index].Status;
            TimeIn = empArr[index].TimeIn;
            TimeOut = empArr[index].TimeOut;
            dtPunch = empArr[index].dtPunch;
            Line = empArr[index].Line;
        }
        var checked = IsChecked ? "checked" : " ";
        var select = '<select id="inpStatus_' + EmpId + '" data-val="false" style="width: 100%; text-align-last:center; text-align:center;" class="editable inp status">';
        for (var j = 0; j < AllStatus.length; j++) {
            if (AllStatus[j] === Status) {
                select += '<option value="' + AllStatus[j] + '" selected="selected">' + AllStatus[j] + '</option>';
            } else {
                select += '<option value="' + AllStatus[j] + '">' + AllStatus[j] + '</option>';
            }

        }
        select += '</select>';
        //console.log(index);
        //console.log(resultArr[index]);
        $("#fixAttGrid").children("tbody").append("<tr id='tr_" + EmpId + "'>" +
            "<td><input id='myCheckBox_"+ index + "' name='check_list' class='myCheckBox' type='checkbox' " + checked + "/></td>"
            + "<td id='tblEmpId' style='display: none;'>" + EmpId + "</td>"
            + "<td id='tbldtPunch'>" + dtPunch + "</td>"
            + "<td id='tblEmpCode'>" + EmpCode + "</td>"

            + "<td id='tblTimeIn'><div class='input-group bootstrap-timepicker timepicker' style='width: 100%;'>" +
            "<input type='text' value='" + TimeIn + "' class='editable inp timeIn' id='inpTimeIn_" + index + "'/></div></td>"
            + "<td id='tblTimeOut'><div class='input-group bootstrap-timepicker timepicker' style='width: 100%;'>" +
            "<input type='text' value='" + TimeOut + "' class='editable inp timeOut' id='inpTimeOut_" + index + "'/></div></td>"
             + "<td id='tblStatus'>" + select + "</td>"
            + "<td id='tblOtHour'>" + OtHour + "</td>"
            + "<td id='tblEmpName'>" + EmpName + "</td>"
            + "<td id='tblSectName'>" + SectName + "</td>"
            + "<td id='tblShiftId' style='display: none;'>" + ShiftId + "</td>"
            + "<td id='tblShiftName'>" + ShiftName + "</td>"
            + "<td id='tblLine'>" + Line + "</td>"
            + "<td id='tblRemarks'><input type='text' value='" + Remarks + "' class='editable inp remarks' id='inpRemarks_" + EmpId + "'/></td>"
            + "</tr>"
            );
    }

    function updateArr(id, key, val) {
        for (var i = 0; i < empArrLen; i++) {
            if (empArr[i].EmpId.toString() === id.toString()) {
                empArr[i][key] = val;
                console.log(empArr[i][key] + ", Id : " + empArr[i].EmpId + ", Name: " + empArr[i].EmpName);
                break;
            }
        }
    }

    function updateFullArr(key, val) {
        for (var i = 0; i < empArrLen; i++) {
            empArr[i][key] = val;
            //if(i<20)
            console.log(key + " : " +empArr[i][key] + ", Id : " + empArr[i].EmpId + ", Name: " + empArr[i].EmpName);
        }
    }

    function clearSearchFields(obj) {
        var txt = $(obj).val();
        //console.log(obj);
        $("input[id^='search']").val("");
        $(obj).val(txt);
        if (obj.id === "searchStatus" || obj.id === "compareOtHour") {
            $("#searchStatus").val(txt).one("click");
        } else {
            $("#searchStatus").val("").one("click");
        }
    }



    $(document).on("change", ".myCheckBox", function () {

        var txt = this.id;
        var id = txt.match(/\d/g);
        id = id.join("");
        if (this.checked) {
            updateArr(id, "IsChecked", true);
        } else {
            updateArr(id, "IsChecked", false);
        }
    });

    $(document).on("change", ".timeIn", function () {
        var txt = this.id;
        var id = txt.match(/\d/g);
        id = id.join("");
        updateArr(id, "TimeIn", this.value);
    });

    $(document).on("change", ".timeOut", function () {
        var txt = this.id;
        var id = txt.match(/\d/g);
        id = id.join("");
        updateArr(id, "TimeOut", this.value);
    });

    $(document).on("change", ".status", function () {
        var txt = this.id;
        var id = txt.match(/\d/g);
        id = id.join("");
        updateArr(id, "Status", this.value);
    });

    $(document).on("change", ".remarks", function () {
        var txt = this.id;
        var id = txt.match(/\d/g);
        id = id.join("");
        updateArr(id, "Remarks", this.value);
    });

    function deleteRow(rowid) {
        var row = document.getElementById('tr_' + rowid);
        try {
            row.parentNode.removeChild(row);
        } catch (ex) {
            alert('An error has occurred: ' + ex.message);
        }
    }

    function emptyTableTbody() {
        $("#fixAttGrid").children("tbody").html("");
    }

    function showMessage(visible, total) {
        $("#showMessage").html("Showing " + visible + " out of " + total + " results.").show();
    }

    function initSearchArray(gridData, allStatus) {
        gtable = document.getElementById("fixAttGrid");
        empArr = gridData;
        //console.log(empArr);

        //console.log(gtable);
        empArrLen = Object.keys(empArr).length;
        visible = empArrLen < totalShowLimit ? empArrLen : totalShowLimit;

        remain = empArrLen - visible;
        isResult = false;
        showMessage(visible, empArrLen);
        AllStatus = allStatus;
        console.log(AllStatus);
    }

    function fillTable() {
        var newTbody = document.createElement('tbody');
        var oldTbody = gtable.getElementsByTagName('tbody');
        gtable.replaceChild(newTbody, oldTbody[0]);

        //empArrLen = Object.keys(empArr).length;
        for (var i = 0; i < totalShowLimit && i < empArrLen; i++) {
            addRow(i);
        }

        visible = totalShowLimit < empArrLen ? totalShowLimit : empArrLen;
        remain = empArrLen - visible;
        isResult = false;
        showMessage(visible, empArrLen);

    }
    //Testing needed
    function scrollToTop() {


        $("#scrollYDiv").animate({ scrollTop: 0 });

    }

    function showNextContents(callback) {
        var n, i;
        console.log('Inside the show next content');
        totalShowLimit = empArrLen;
        if (!isResult && remain > 0) {
            n = (visible + totalShowLimit) < empArrLen ? (visible + totalShowLimit) : empArrLen;
            for (i = visible; i < n; i++) {
                addRow(i);
            }
            visible = n;
            remain = remain - totalShowLimit;
            showMessage(visible, empArrLen);
        }
        else if (isResult && remain > 0) {
            n = (visible + resultShowLimit) < resultArrLen ? (visible + resultShowLimit) : resultArrLen;
            for (i = visible; i < n; i++) {
                addRow(i);
            }
            visible = n;
            remain = remain - resultShowLimit;
            showMessage(visible, resultArrLen);
        }
        if (typeof callback === "function") {
            callback();
        }
    }

    function debounce(func, wait, immediate) {
        var timeout;
        return function () {
            var context = this, args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };

    function setTimeoutWrapper(l, filter, chunkSize, delayTime,colName,comp) {
        setTimeout(function () {
            var i, n = empArrLen < (l + chunkSize) ? empArrLen : (l + chunkSize);
            var searchVal;
            //console.log("compare" + colName);
            for (i = l; i < n; i++) {
                searchVal = empArr[i][colName].toString().toUpperCase();
                if (searchVal) {
                    if (typeof comp === "function" ) {
                        if (comp(filter, searchVal, "compare" + colName) > -1) {
                            resultArr.push(empArr[i]);
                            //console.log("compare" + colName + " : ",filter, searchVal, resultArr[resultShowCount]);
                            if (resultShowCount < resultShowLimit) {
                                addRow(resultShowCount);
                            }
                            resultShowCount++;
                        }
                    }
                    else if (searchVal.indexOf(filter) > -1) {
                        resultArr.push(empArr[i]);
                        if (resultShowCount < resultShowLimit) {
                            addRow(resultShowCount);
                        }
                        resultShowCount++;
                    }
                }
            }
        }, delayTime);
    }



    var mySearchFunction = debounce(function (obj, colName, comp) {
        clearSearchFields(obj);
        var id = obj.id;
        var input, filter, i, delayTime;
        input = document.getElementById(id);
        //console.log(obj, colName, comp, input);
        filter = input.value.toUpperCase();

        //var searchtype = searchType(filter);
        //if (searchtype === 0) { return; }
        resultArr = [];
        resultShowCount = 0;
        if (!filter) {
            isResult = false;
            fillTable();
            return;
        }
        //console.log(filter);
        isResult = true;

        emptyTableTbody();

        var chunkSize = 1000;
        //console.log(comp);
        // Loop through all table rows chunk by chunk
        for (i = 0, delayTime = 0; i < empArrLen; i += chunkSize, delayTime++) {
            setTimeoutWrapper(i, filter, chunkSize, delayTime, colName,comp);
        }

        //first row selected and scrollbar back to top and showig message
        setTimeout(function () {
            scrollToTop();
            var showing = resultShowLimit > resultShowCount ? resultShowCount : resultShowLimit;
            showMessage(showing, resultShowCount);
            visible = showing;
            remain = resultShowCount - visible;
            resultArrLen = Object.keys(resultArr).length;
        }, delayTime + 20);

    }, 500);

    function scrolled(div) {
        //bottom
        //visible height + pixel scrolled = total height
        if (div.offsetHeight + div.scrollTop === div.scrollHeight) {
            showNextContents(function() {
                setTimeout(initDynamicTimePickers(), 10);
            });

        }
        //right end
        if (div.offsetWidth + div.scrollLeft === div.scrollWidth) {

        }
    }

    /*Loadnig related codes end*/
    /*----------------------------------------------------*/
    /******************************************************/



    $(document).ready(function () {
        $('input[name="Criteria"]').on('ifClicked', function (event) { //radio button change code
            var selectedValue = this.value;
            switch (selectedValue) {
                case 'EmpID':
                    $("#empIdSelect").prop('disabled', false);
                    $("#sectSelect").prop('disabled', false);
                    $("#shiftSelect").prop('disabled', false);
                    $("#statusSelect").prop('disabled', false);
                    $('#lineSelect').prop('disabled', false);
                    break;
                case 'Sec':
                    $("#empIdSelect").prop('disabled', false);
                    $("#sectSelect").prop('disabled', false);
                    $("#shiftSelect").prop('disabled', false);
                    $("#statusSelect").prop('disabled', false);
                    $('#lineSelect').prop('disabled', false);
                    break;
                case 'ShiftTime':
                    $("#empIdSelect").prop('disabled', false);
                    $("#sectSelect").prop('disabled', false);
                    $("#shiftSelect").prop('disabled', false);
                    $("#statusSelect").prop('disabled', false);
                    $('#lineSelect').prop('disabled', false);
                    break;
                case 'Status':
                    $("#empIdSelect").prop('disabled', false);
                    $("#sectSelect").prop('disabled', false);
                    $("#shiftSelect").prop('disabled', false);
                    $("#statusSelect").prop('disabled', false);
                    $('#lineSelect').prop('disabled', false);
                    break;
                case 'Line':
                    $("#empIdSelect").prop('disabled', false);
                    $("#sectSelect").prop('disabled', false);
                    $("#shiftSelect").prop('disabled', false);
                    $("#statusSelect").prop('disabled', false);
                    $('#lineSelect').prop('disabled', false);
                    break;
                default:    // 'All' and 'Missing'
                    $("#empIdSelect").prop('disabled', false);
                    $("#sectSelect").prop('disabled', false);
                    $("#shiftSelect").prop('disabled', false);
                    $("#statusSelect").prop('disabled', false);
                    $('#lineSelect').prop('disabled', false);
                   break;
            }


        });

        initDatePicker();
        $("#timeIn").timepicker({
            showMeridian: false,
            defaultTime: '08:00'
    });
        $("#timeOut").timepicker({ showMeridian: false, defaultTime: '17:00' });


        $("input:checkbox[name=allChecked]").on("ifChecked", function () {
            updateFullArr("IsChecked", true);
            $("input:checkbox[name=check_list]").prop('checked', true);
        });
        $("input:checkbox[name=allChecked]").on("ifUnchecked", function () {
            updateFullArr("IsChecked", false);
            $("input:checkbox[name=check_list]").prop('checked', false);
        });

    });

    function OnSuccess(response) {
        //alert("aaa");
        $("#fixAttGridDiv").html(response.fixAttGrid);
        initScroller();
        initDynamicTimePickers();
        initSearchArray(response.gridData, response.AllStatus);
        uncheckAllCheckBox();
    }

    function OnFailure(xhr,response) {
        //alert(response.responseText + " : " + xhr.responseText);
        var matches = xhr.responseText.match(/<title>(.*?)<\/title>/);
        modal("ERROR : " + matches[1],"error");
    }


    $("#fillDatabtn").click(function () {
        var rowCount = $('#fixAttGrid tr').length;
        var flag = false;
        if (rowCount > 0) {
            if ($('input:checkbox[name=statusChk]').is(':checked')) {
                if ($("#statusSelectrt").val()) {
                    var value = $("#statusSelectrt").val();
                    $("[id^='inpStatus_']").val(value).change();
                    //console.log($("[id^='inpStatus'") + " : " + AllStatus.indexOf($("#statusSelectrt").val()));

                    updateFullArr("Status", value);
                    flag = true;
                } else {
                    modal("Please Select a Status.","info");
                }
            }
            if ($('input:checkbox[name=timeOutChk]').is(':checked')) {
                $("input[id*='inpTimeOut']").val($("#timeOut").val());
                updateFullArr("TimeOut", $("#timeOut").val());
                flag = true;
            }
            if ($('input:checkbox[name=timeInChk]').is(':checked')) {
                $("input[id*='inpTimeIn']").val($("#timeIn").val());
                updateFullArr("TimeIn", $("#timeIn").val());
                flag = true;
            }
            if (flag) {
                modal("Data succefully filled in.","info");
            }
        }
    });

    $("#updateBtn").click(function () {
        var dtFrom = $("#dtFrom").val();
        var dtTo = $("#dtTo").val();
        var criteria = $("#Criteria:checked").val();
        var i, GridDataList = [];
        for (i = 0; i < empArrLen; i++) {
            //console.log("i : " + i);
            if ($("#myCheckBox_" +i).prop("checked")) {
                empArr[i].IsChecked = true;
                empArr[i].dtFrom = dtFrom;
                empArr[i].dtTo = dtTo;
                empArr[i].Criteria = criteria;
                empArr[i].TimeIn =$("#inpTimeIn_" + i).val();
                empArr[i].TimeOut =$("#inpTimeOut_" + i).val();
                GridDataList.push(empArr[i]);
                //console.log(empArr[i].EmpId + " : " + empArr[i].EmpName);
            } else {
                //console.log(empArr[i].EmpId + " : " + empArr[i].EmpName);
            }
        }



        if (GridDataList.length <= 0) {
            modal("Please select employees to update.","error");
            return;
        }

        var json = { GridDataList: GridDataList };
        console.log(json);
        $.ajax({
            type: "POST",
            url: '@Url.Action("UpdateSelectedData", "FixAttendance")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(json),
            beforeSend: function() {
                $("#progress").show();
            },
            success: function (data) {
                //alert(data.response.Message);
                modal(data.response.Message,"success");

                //Unchecking all the checkboxes
                uncheckAllCheckBox();
                updateFullArr("IsChecked", false);
            },
            complete: function() {
                $("#progress").hide();
                uncheckAllCheckBox();
            },
            error: function (xhr, response) {
                $("#progress").hide();
                var matches = xhr.responseText.match(/<title>(.*?)<\/title>/);
                modal("ERROR : " + matches[1],"error");
            }
        });
    });

</script>


