@model GTERP.Models.HR_Leave_Balance

@{
    ViewBag.Title = "Leave Balance";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<HR_Leave_Balance> LeaveBalance = new List<HR_Leave_Balance>();

    LeaveBalance = ViewBag.LeaveBalanceList;
    List<SelectListItem> year = ViewBag.OpeningYear;

}
<link href="~/css/customFormStyle.css" rel="stylesheet" />
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">


<style>

    .mCustomScrollbar {
        height: 575px;
    }

    #styletext {
        color: transparent;
        background: #666666;
        -webkit-background-clip: text;
        -moz-background-clip: text;
        background-clip: text;
        text-shadow: 0px 3px 3px rgba(255,255,255,0.5);
        font-weight: 100;
    }




</style>

<h6 id="styletext" class="text-center">Leave Balance Excel File Upload</h6>
<div class="my-4">
    <form method="post" enctype="multipart/form-data" asp-action="LeaveBalanceUploadFile">
        <div class="input-group input-group w-50" style="margin:0 auto;">
            <span class="input-group-btn input-group-prepend">
                <span class="btn btn-info rounded-0" onclick="$(this).parent().find('input[type=file]').click();">Browse</span>
                <input name="file" onchange="$(this).parent().parent().find('.form-control').html($(this).val().split(/[\\|/]/).pop());" style="display: none;" type="file" id="FileUpload1">
            </span>
            <span class="form-control border border-info" style="background: #f2f2f2e6;"></span>
            <button class="rounded-0 btn btn-info btn-sm" type="submit" id="btnUpload">Upload</button>
            <div style="padding-left:5px;">
                <a href="~/HR/DownloadSampleFile?file=SampleFormatForLeaveBalance.xlsx" title="Download Sample Format"
                   class="btn btn-info rounded-0" target="_blank"><i class="mdi mdi-file-excel"></i> Sample Format</a>
            </div>
        </div>
    </form>
</div>

<div class="card">
    <h4 class="form-header btn-info">
        <span class="fas fa-tasks"> </span> LEAVE BALANCE
    </h4>
    <div class="card-body">
        <!--Modal-->
        <div class="myMessage">
            <div class="card bg-primary mx-auto">
                <div class="card-header">Message</div>
                <div class="card-body" id="modalMessage"></div>
            </div>
        </div>


        <div style="text-align: right;">
            <button id="download-csv"><i class="mdi mdi-view-column"></i>'</button>
            <button id="exportExcel"><i class="mdi mdi-file-excel"></i> </button>
          @*  <div style="text-align: center;">
                 
                <button id="select-all">Select All</button>
                <button id="deselect-all">Deselect All</button>

                <span id="select-stats"></span>
            </div> *@ 

        </div>


        <!--Main field-->
        <div class="row">
            <!--Left Option form-->
            <div class="col-md-4 col-12">
                <!--First option-->
                <div class="card p-3">
                    <fieldset id="firstOpt">
                        <div id="firstOptForm">
                            <div class="form-group">
                                <div class="input-group mb-2">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">
                                            @Html.LabelFor(model => model.DtOpeningBalance, new { @class = "control-label" })
                                        </span>
                                    </div>
                                    @Html.HiddenFor(m => m.EmpId, new { id = "EmpId" })
                                    @if (year.Count == 0)
                                    {
                                        <select asp-for="DtOpeningBalance" asp-items="ViewBag.OpeningYear" name="DtOpeningBalance" class="form-control selectpicker" data-size="5">
                                            <option value="@DateTime.Now.Year">@DateTime.Now.Year</option>
                                        </select>
                                    }
                                    else
                                    {
                                        <select asp-for="DtOpeningBalance" asp-items="ViewBag.OpeningYear" name="DtOpeningBalance" class="form-control selectpicker" data-size="5">
                                        </select>
                                    }

                                </div>
                            </div>
                            <div class="form-group">
                                <h5>Criteria</h5>
                                <div id="myCriteria">
                                    <div class="form-check form-check-inline custom-radio ml-1">
                                        <input type="radio" asp-for="Criteria" value="All" checked style="height: 17px; width: 17px; vertical-align: middle; " class="mr-1" /> All Employee
                                    </div>
                                    <div class="form-check form-check-inline custom-radio pl-1">
                                        <input type="radio" asp-for="Criteria" value="EmpID" class="mr-1" style="height: 17px; width: 17px; vertical-align: middle; " /> Employee Wise
                                    </div>
                                    <div class="form-check form-check-inline custom-radio pl-1">
                                        <input type="radio" asp-for="Criteria" value="Dept" class="mr-1" style="height: 17px; width: 17px; vertical-align: middle; " /> Department Wise
                                    </div>
                                    <div class="form-check form-check-inline custom-radio pl-1">
                                        <input type="radio" asp-for="Criteria" value="Sec" class="mr-1" style="height: 17px; width: 17px; vertical-align: middle; " /> Section Wise
                                    </div>
                                    <div class="form-check form-check-inline custom-radio pl-1">
                                        <input type="radio" asp-for="Criteria" value="Line" class="mr-1" style="height: 17px; width: 17px; vertical-align: middle; " /> Line Wise
                                    </div>
                                    <div class="form-check form-check-inline custom-radio pl-1">
                                        <input type="radio" asp-for="Criteria" value="Floor" class="mr-1" style="height: 17px; width: 17px; vertical-align: middle; " /> Floor Wise
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                    </fieldset>
                    <!--Second Option-->
                    <fieldset id="secondOpt">
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    @Html.LabelFor(model => model.HR_Emp_Info.EmpCode, new { @class = "control-label" })
                                </span>
                            </div>
                            <select asp-for="EmpId" asp-items="ViewBag.EmpId" id="EmpCode" data-val="false" name="EmpCode" class="form-control " disabled="disabled">
                            </select>
                        </div>


                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    Department
                                </span>
                            </div>
                            <select asp-for="DeptId" asp-items="ViewBag.DeptId" id="DeptId" data-val="false" class="form-control" disabled="disabled">
                            </select>
                        </div>

                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    Section
                                </span>
                            </div>
                            <select asp-for="SectId" asp-items="ViewBag.SectId" id="SectId" data-val="false" class="form-control" disabled="disabled">
                            </select>
                        </div>

                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    Line
                                </span>
                            </div>
                            <select asp-for="LineId" asp-items="ViewBag.LineId" id="LineId" data-val="false" class="form-control" disabled="disabled">
                            </select>
                        </div>

                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    Floor
                                </span>
                            </div>
                            <select asp-for="FloorId" asp-items="ViewBag.FloorId" id="FloorId" data-val="false" class="form-control" disabled="disabled">
                            </select>
                        </div>
                        <hr />
                    </fieldset>
                    <!--3rd option(Button)-->
                    <fieldset class="mx-auto">
                        <button type="button" id="refreshBtn" class="btn btn-primary rounded-0"><span class="fas fa-sync"> </span> Refresh List</button>
                    </fieldset>
                </div>




                <!--4th option()-->
                <div class="card p-2 mt-2">
                    @*<input type="checkbox" id="yearlyLBinput" name="yearlyLBinput"> Yearly Leave Balance input<br>*@
                    <fieldset id="leaveSetup">
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    @Html.LabelFor(model => model.CL, new { @class = "control-label" })
                                   
                                </span>
                            </div>
                            @Html.TextBoxFor(model => model.CL, new { @class = "form-control" })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <input type="checkbox" id="casualLeaveChk" name="casualLeaveChk">
                                </div>
                            </div>
                        </div>
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    @Html.LabelFor(model => model.SL, new { @class = "control-label " })
                                </span>
                            </div>
                            @Html.TextBoxFor(model => model.SL, new { @class = "form-control" })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <input type="checkbox" id="sickLeaveChk" name="sickLeaveChk">
                                </div>
                            </div>
                        </div>
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    @Html.LabelFor(model => model.EL, new { @class = "control-label" })
                                </span>
                            </div>
                            @Html.TextBoxFor(model => model.EL, new { @class = "form-control" })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <input type="checkbox" id="earnLeaveChk" name="earnLeaveChk">
                                </div>
                            </div>
                        </div>
                        <div id="allCheckedDiv" class="form-group">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-8 col-md-8 col-sm-8" style="padding: 0px 10px 0px 10px">
                                <input type="checkbox" id="allChecked" name="allChecked"> All checked<br>
                            </div>
                        </div>
                        <div class="text-center">
                    
                            @* <span id="select-stats">
                                <input type="button" id="select-all" class="btn btn-sm btn-warning rounded-0" value="Select All" />
                              
                                <button type="button" id="FillBtn" class="btn btn-sm btn-primary rounded-0">
                                    <i class="fas fa-check"></i> Fill
                                </button>
                            </span> *@
                            <span id="select-stats">
                                <button type="button" id="select-all" class="btn btn-sm btn-warning rounded-0">
                                    <i class="fas fa-check"></i> Select All
                                </button>
                            </span>

                            <span id="select-stats">
                                <button type="button" id="deselect-all" class="btn btn-sm btn-warning rounded-0" >
                                    <i class="fas fa-check"></i> DeSelect
                                    </button>
                            </span>

                            <span id="select-stats">
                                <button type="button" id="FillBtn" class="btn btn-sm btn-warning rounded-0">
                                    <i class="fas fa-check"></i> Fill
                                </button>
                            </span>

                            <span>
                                <button type="submit" id="UpdateDataBtn" class="btn btn-sm btn-success rounded-0">
                                    <span class="fas fa-check"> </span>&nbsp; Update
                                </button>
                                @*<button type="submit" id="deleteBtn" class="btn btn-danger" onclick="deleteConfirmation(event)">
                                <span class="glyphicon glyphicon-trash"> </span>&nbsp; Delete
                                </button>*@
                                @*btn btn-default*@
                                <button type="submit" id="cancelBtn" class="btn btn-sm btn-warning rounded-0">
                                    <span class="fas fa-retweet"> </span> Reset
                                </button>
                            </span>
                        </div>


                    </fieldset>
                    <fieldset>
                        <center>
                        </center>
                    </fieldset>
                </div>
            </div> <!--End fo left form-->
            <!--Datatable-->
            <fieldset class="col-md-8 col-12" id="datatableDiv">
                <div id="example-table">
                </div>
            </fieldset>

                                @*<!--Right Option form-->
            <div class="col-sm-12 col-lg-2 col-md-2">

            </div> <!--End of Right form-->*@
        </div> <!-- End of main field-->
    </div> <!--End of panel body-->
</div>  <!--End of panel info-->




<div id="example-table"></div>
@section Scripts{

                                    @*        <script src="https://cdn.datatables.net/buttons/2.3.2/js/dataTables.buttons.min.js"></script>
       <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
       <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
       <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
       <script src="https://cdn.datatables.net/buttons/2.3.2/js/buttons.html5.min.js"></script>
       <script src="https://cdn.datatables.net/buttons/2.3.2/js/buttons.print.min.js"></script> *@

    <script src="https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>



    <script>


        $(document).ready(function () {
         
            var table;
            table = new Tabulator("#example-table", {
                layout: "fitColumns",
                addRowPos: "bottom",
                pagination: "remote",
                paginationSize: 21,
                selectable: true,
                columns: [

                    { title: "Code", field: "EmpCode", sorter: "number", headerFilter: "input", width: 95 },
                    { title: "Name", field: "EmpName", headerFilter: "input", width: 150, hozAlign: "left" },
                    { title: "CL", field: "CL", width: 80, sorter: "number", headerFilter: "input" },
                    { title: "SL", field: "SL", width: 80, sorter: "number", headerFilter: "input" },
                    { title: "EL", field: "EL", width: 80, sorter: "number", headerFilter: "input" },
                    { title: "ML", field: "ML", width: 80, sorter: "number", headerFilter: "input" },
                    { title: "Department", field: "DeptName", headerFilter: "input", width: 200 },
                    { title: "Section", field: "SectName", headerFilter: "input", width: 200},
                    { title: "EmpType", field: "EmpType", headerFilter: "input", width: 200 },
                    { title: "Floor", field: "FloorName", headerFilter: "input", width: 120 },
                    { title: "Line", field: "Line", headerFilter: "input", width: 120 },
                    { title: "Opening", field: "dtOpeningDate", sorter: "number", headerFilter: "input", hozAlign: "center", width: 100 },
                  

                ]
            });


            



            function LoadData() {
                var dtOpening = $("#DtOpeningBalance").val();
                var empId = 0;
                var secId = 0;
                var deptId = 0;
                var lineId = 0;
                var floorId = 0;

                // Get the selected value from your radio buttons
                var selectedValue = $("input[name='Criteria']:checked").val();

                // Use a switch statement to set variables based on selectedValue
                switch (selectedValue) {
                    case 'EmpID':
                        empId = $("#EmpCode").val();
                        break;
                    case 'Sec':
                        secId = $("#SectId").val();
                        break;
                    case 'Dept':
                        deptId = $("#DeptId").val();
                        break;
                    case 'Line':
                        lineId = $("#LineId").val();
                        break;
                    case 'Floor':
                        floorId = $("#FloorId").val();
                        break;
                }

                // Rest of your code...

                $.ajax({
                    url: '@Url.Action("GetLeaveBalances", "HR")',
                    type: 'GET',
                    dataType: "json",
                    data: {
                        Criteria: selectedValue,
                        EmpId: empId,
                        SectId: secId,
                        DeptId: deptId,
                        LineId: lineId,
                        FloorId: floorId,
                        DtOpBal: dtOpening
                    },
                    success: function (response) {
                   
                        // console.log(response);

                        table = new Tabulator("#example-table", {
                            layout: "fitColumns",
                            addRowPos: "bottom",
                            pagination: "remote",
                            paginationCounter: "rows",
                            paginationSize: 21,
                            paginationSizeSelector: [10, 15, 25, 30],
                            selectable: true,
                            data: response.data,
                            columns: [

                                { title: "Code", field: "EmpCode", sorter: "number", headerFilter: "input", width: 100 },
                                { title: "Name", field: "EmpName", headerFilter: "input", width: 150, hozAlign: "left"},
                                { title: "CL", field: "CL", width: 80, sorter: "number", headerFilter: "input", editor: "input" },
                                { title: "SL", field: "SL", width: 80, sorter: "number", headerFilter: "input", editor: "input" },
                                { title: "EL", field: "EL", width: 80, sorter: "number", headerFilter: "input", editor: "input" },
                                { title: "ML", field: "ML", width: 80, sorter: "number", headerFilter: "input", editor: "input" },
                                { title: "Department", field: "DeptName", headerFilter: "input", width: 200 },
                                { title: "Section", field: "SectName", headerFilter: "input", width: 200 },
                                { title: "EmpType", field: "EmpType", headerFilter: "input", width: 200 },
                                { title: "Floor", field: "FloorName", headerFilter: "input", width: 120 },
                                { title: "Line", field: "Line", headerFilter: "input", width: 120 },
                                { title: "Opening", field: "dtOpeningDate", sorter: "number", headerFilter: "input", hozAlign: "center", width: 110 },
                               

                            ]
                        });


                        document.getElementById("exportExcel").addEventListener("click", function () {
                            table.download("xlsx", "data.xlsx", { sheetName: "My Data" });
                        });

                        //trigger download of data.csv file
                        document.getElementById("download-csv").addEventListener("click", function () {
                            table.download("csv", "data.csv");
                        });


                        // table.on("rowSelectionChanged", function (data, rows) {
                        //     document.getElementById("select-stats").innerHTML = data.length;
                        // });



                        //select row on "select all" button click
                        document.getElementById("select-all").addEventListener("click", function () {
                            table.selectRow();
                        
                        });

                        //deselect row on "deselect all" button click
                        document.getElementById("deselect-all").addEventListener("click", function () {
                            table.deselectRow();
                            
                        });




                        // const selectAllButton = document.getElementById("select-all");
                        // const deselectAllButton = document.getElementById("deselect-all");

                        // // Add a click event listener to the "Select All" button
                        // selectAllButton.addEventListener("click", function () {
                        //     table.selectRow();
                        
                        // });

                        // // Add a click event listener to the "Deselect All" button
                        // deselectAllButton.addEventListener("click", function () {
                        //     table.deselectRow();
                          
                        // });

                      



                        if (response.Success == 1) {
                            if (response.data != null) {
                               // uncheckAllCheckBox()
                            }
                        }
                    },
                    error: function () {

                        alert("An error occurred: ");
                    }
                });




            }



            var saveButton = document.getElementById('refreshBtn');

            saveButton.addEventListener('click', function () {
                LoadData();
            });


    
            // $('#FillBtn').click(function () {
            //     var cl = $("#CL").val();
            //     var sl = $("#SL").val();
            //     var el = $("#EL").val();

            //     table.getSelectedRows().forEach(function (row) {
            //         row.update({ CL: $.trim(cl), SL: $.trim(sl), EL: $.trim(el) });
            //     });
            // });


            // $('#FillBtn').click(function () {
            //     var cl = $("#CL").val();
            //     var sl = $("#SL").val();
            //     var el = $("#EL").val();

            //     var casualLeaveChecked = $("#casualLeaveChk").is(":checked");
            //     var sickLeaveChecked = $("#sickLeaveChk").is(":checked");
            //     var earnLeaveChecked = $("#earnLeaveChk").is(":checked");

            //     table.getSelectedRows().forEach(function (row) {
            //         if (casualLeaveChecked) {
            //             row.update({ CL: $.trim(cl) });
            //         }
            //         if (sickLeaveChecked) {
            //             row.update({ SL: $.trim(sl) });
            //         }
            //         if (earnLeaveChecked) {
            //             row.update({ EL: $.trim(el) });
            //         }
            //     });
            // });


            $('#FillBtn').click(function () {
                var cl = $("#CL").val();
                var sl = $("#SL").val();
                var el = $("#EL").val();

                var casualLeaveChecked = $("#casualLeaveChk").is(":checked");
                var sickLeaveChecked = $("#sickLeaveChk").is(":checked");
                var earnLeaveChecked = $("#earnLeaveChk").is(":checked");
                var allChecked = $("#allChecked").is(":checked");

                table.getSelectedRows().forEach(function (row) {
                    if (allChecked) {
                        row.update({ CL: $.trim(cl), SL: $.trim(sl), EL: $.trim(el) });
                    } else {
                        if (casualLeaveChecked) {
                            row.update({ CL: $.trim(cl) });
                        }
                        if (sickLeaveChecked) {
                            row.update({ SL: $.trim(sl) });
                        }
                        if (earnLeaveChecked) {
                            row.update({ EL: $.trim(el) });
                        }
                    }
                });
            });

            // Add a click event handler to the "allChecked" checkbox
            $("#allChecked").click(function () {
                var isChecked = $(this).is(":checked");

                // Show/hide the other checkboxes based on the "allChecked" checkbox state
                $("#casualLeaveChk, #sickLeaveChk, #earnLeaveChk").prop("checked", isChecked);

                // Clear the input fields if "allChecked" is checked
                if (isChecked) {
                    row.update({ CL: $.trim(cl), SL: $.trim(sl), EL: $.trim(el) });
                }
            });


            // Function to update input values based on checkbox states
       


            // Toggle row selection on row click
            // table.getElement().addEventListener("click", function (e) {
            //     if (e.target.tagName === "TR") {
            //         var row = table.getRowFromElement(e.target);
            //         row.toggleSelect();
            //     }
            // });

            // Toggle "Select All" button
            // $('#select-all').click(function () {
            //     if (table.getSelectedRows().length === 0) {
            //         table.selectRow();
            //         $('#select-all').val('Deselect All');
            //     } else {
            //         table.deselectRow();
            //         $('#select-all').val('Select All');
            //     }
            // });

          
          



            // //Deselect all rows
            // $('#cancelBtn').click(function () {
            //     table.deselectRow();
            // });

            // Clear input fields
            function clearAll() {
                $("#CL").val("");
                $("#SL").val("");
                $("#EL").val("");
            }
            $('#cancelBtn').click(function () {
                    // table.deselectRow();
                clearAll();
                 });

            // Trigger the Select2 initialization
            $("#EmpCode").select2();


            ////////////// ----------

            document.getElementById("UpdateDataBtn").addEventListener("click", function () {
                // Create an array to store the updated data
                var updatedData = [];

                // Iterate through selected rows and build the updated data array
                table.getSelectedRows().forEach(function (row) {
                    updatedData.push({
                        EmpId: row.getData().EmpId,
                        // EmpName: row.getData().EmpName,
                        CL: row.getData().CL,
                        EL: row.getData().EL,
                        SL: row.getData().SL,
                        ML: row.getData().ML,
                        LvBalId: row.getData().LvBalId,
                        DtOpeningBalance: $('#DtOpeningBalance').val(),
                    });
                });

                // Convert the updated data array to JSON
                //var updatedDataJson = JSON.stringify(updatedData);

                // Perform an AJAX request to update the data
                var LeaveListstring = JSON.stringify(updatedData);
                console.log(updatedData);

                var url = '@Url.Action("SaveLeaveBalance", "HR")';
                //var url = 'HR/SaveLeaveBalance'
                $.ajax({
                    type: 'POST',
                    // url: '@Url.Action("SaveLeaveBalance", "HR")',
                    url: url,
                    //dataType: "json",
                    contentType: 'application/json',
                    // data: JSON.stringify({ LeaveBalancestring: updatedData }),
                    data: JSON.stringify(updatedData),
                    success: function (response) {
                        customFile('1', "Data Update Successfully");
                        // if (response.Success == 1) {
                        //     // if (response.LeaveBalance != null) {
                        //     //     //alert("Result is null");
                        //     //     // table.setData(response.data);
                        //     // }
                        // }
                    },
                    error: function () {
                        customFile('3', "Something is wrong. Please contact your admin.");
                    },
                });
            });
            // var submitButton = document.getElementById('UpdateDataBtn');

            // submitButton.addEventListener('click', function () {
            //     LoadData();
            // });







            // radio button hide show
            $('input[type="radio"]').change(function () {
                selectedValue = this.value;
                switch (selectedValue) {

                    case "All":
                        $('#EmpCode').prop('disabled', true);
                        $('#SectId').prop('disabled', true);
                        $('#DeptId').prop('disabled', true);
                        $('#LineId').prop('disabled', true);
                        $('#FloorId').prop('disabled', true);
                        break;
                    case "EmpID":
                        $('#EmpCode').prop('disabled', false);
                        $('#SectId').prop('disabled', true);
                        $('#DeptId').prop('disabled', true);
                        $('#LineId').prop('disabled', true);
                        $('#FloorId').prop('disabled', true);
                        break;
                    case "Sec":
                        $('#EmpCode').prop('disabled', true);
                        $('#SectId').prop('disabled', false);
                        $('#DeptId').prop('disabled', true);
                        $('#LineId').prop('disabled', true);
                        $('#FloorId').prop('disabled', true);
                        break;
                    case "Dept":
                        $('#EmpCode').prop('disabled', true);
                        $('#SectId').prop('disabled', true);
                        $('#DeptId').prop('disabled', false);
                        $('#LineId').prop('disabled', true);
                        $('#FloorId').prop('disabled', true);
                        break;
                    case "Line":
                        $('#EmpCode').prop('disabled', true);
                        $('#SectId').prop('disabled', true);
                        $('#DeptId').prop('disabled', true);
                        $('#LineId').prop('disabled', false);
                        $('#FloorId').prop('disabled', true);
                        break;
                    case "Floor":
                        $('#EmpCode').prop('disabled', true);
                        $('#SectId').prop('disabled', true);
                        $('#DeptId').prop('disabled', true);
                        $('#LineId').prop('disabled', true);
                        $('#FloorId').prop('disabled', false);
                        break;
                };
            });

            $('#EmpCode').change(function () {
                var employee = $(this).find(':selected').text();
                var index = employee.indexOf('-');
                var length = employee.length;
                var name = employee.substr(index + 1, length);
                $('#EmpName').val(employee);
                //$('#EmpName').val(name);
            })

        });




    </script>
    }

