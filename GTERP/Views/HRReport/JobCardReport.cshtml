@model IEnumerable<GTERP.ViewModels.EmpWiseSalaryLedger>

@{
    ViewBag.Title = "Attendance View";

    //getting Approval List values
    List<HR_Emp_Salary> ApproveEmpList = ViewBag.EmpApprovetype;
    var ApproveEmpname = ViewBag.empType;
    List<HR_Emp_Salary> AllApproveEmpList = ViewBag.AllEmpApprovetype;
    var gs = ViewBag.GS;
}
<link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">
<style>
    .tbllist th:first-child, .tbllist tbody td:first-child {
        position: sticky !important;
        left: 0px;
        background-color: #f2f2f2e6;
        z-index: 1;
    }

    .tbllist tfoot td:first-child {
        position: sticky !important;
        left: 0px;
        background-color: #f2f2f2e6;
        z-index: 1;
    }

    .tbllist th:last-child, .tbllist tbody td:last-child {
        position: sticky !important;
        right: 0px;
        background-color: #f2f2f2e6;
        z-index: 1;
    }

    .tbllist tfoot td:last-child {
        position: sticky !important;
        right: 0px;
        background-color: #f2f2f2e6;
        z-index: 1;
    }
</style>



<div class="container-fluid">
    <div class="text-center">
        <div class="row">
            <div class="col-12">
                <div class="input-group mb-2">
                    <input type="text" id="empID" class="form-control" placeholder="Select Employee then Enter" />
                    <div class="col-md-3 col-12">
                        <div class="input-group mb-2">
                            <span class="input-group-text">
                                Duration
                            </span>
                          @*   <select asp-items="@ViewBag.period" name="period" id="select1" class="dropdown" onchange="loadJobCardReport()"> *@
                            <select asp-items="@ViewBag.period" name="period" id="select1" class="dropdown">
                                @*<option value="" selected>--Please Select--</option>*@
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3 col-12">
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    From Date:
                                </span>
                            </div>
                            <input type="text" value="" id="from" name="from" class="form-control" autocomplete="off" @* onblur="loadJobCardReport() *@" />
                        </div>
                    </div>
                    <div class="col-md-3 col-12">
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    To Date :
                                </span>
                            </div>
                            <input type="text" value="" id="to" name="to" class="form-control" autocomplete="off" @* onblur="loadJobCardReport() *@" />
                        </div>
                    </div>
                    <div class="col-md-1 col-12">
                        <input type="button" id="btnLaod" @* onclick="loadJobCardReport()" *@ value="Load" class="btn btn-warning btn-block rounded-0 mb-1" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
   

   @*  <form class="card p-2">
      


       @*  <div class="col-12 col-md-12">
            <div id="jsGrid"></div>
        </div> 
    </form>
</div> *@

@* <div>
    <select id="filter-field">
        <option></option>
        <option value="EmpCode">EmpCode</option>
        <option value="EmpName">EmpName</option>
        <option value="DeptName">Department</option>
        <option value="SectName">Section</option>
        <option value="DesigName">Designation</option>
        <option value="EmpType">EmpType</option>
        <option value="Floor">Floor</option>
        <option value="Line">Line</option>
        <option value="dtJoin">Joining Date</option>
        <option value="dtPunchDate">Punch Date</option>
        <option value="Status">Status</option>
        <option value="TimeIn">Time In</option>
        <option value="TimeOut">TimeOut</option>
        <option value="RegHour">Regular OT Hr</option>
        <option value="OTHour">OT Hour</option>
        <option value="OTAmount">OT Amount</option>
    </select>

    <select id="filter-type">
        <option value="=">=</option>
        <option value="<"><</option>
        <option value="<="><=</option>
        <option value=">">></option>
        <option value=">=">>=</option>
        <option value="!=">!=</option>
        <option value="like">like</option>
    </select>

    <input id="filter-value" type="text" placeholder="value to filter">

    <button id="filter-clear">Clear Filter</button>
</div>
 *@


<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col">
                <button id="add-filter" class="btn btn-success">
                    Filtering
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                    </svg>
                </button>
            </div>
            <div class="col">
                <div style="display: flex; align-items: center;" class="float-right">
                    <button type="button" id="download-pdf" class="btn btn-outline-primary" style="margin-right: 2px;">PDF</button>
                    <button id="download-btns" class="btn btn-outline-success">Export</button>
                    <button id="download-btn" class="btn btn-success" style="margin-left: 2px; margin-right: 2px;"><i class="mdi mdi-file-excel"></i></button>
                    <!-- <select id="page-size" style="width: 80px;">
                        <option value="10" selected>10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                        <option value="500">500</option>
                        <option value="1000">1000</option>
                        <option value="5000">5000</option>
                    </select> -->
                </div>
            </div>
        </div>
    </div>

   
</div>



 <div id="example-table"></div>
@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.68/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.2/xlsx.full.min.js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>

    <script src="https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.20/jspdf.plugin.autotable.min.js"></script>

    <script type="text/javascript">

        // $("#from").datepicker({
        //     dateFormat: 'dd-MMM-yyyy'
        // });
        // $("#to").datepicker({
        //     dateFormat: 'dd-MMM-yyyy'

        // });

        $(document).ready(function () {
            $("#from").datepicker({
                dateFormat: 'dd-M-yy'
            });
            $("#to").datepicker({
                dateFormat: 'dd-M-yy'
            });
        });

        function fetchDataFromServer() {
            var MyAppUrlSettings = {
                MyUsefulUrl: '@Url.Action("JobCardReportData", "HRReport")'
            };
            return $.ajax({
                url: MyAppUrlSettings.MyUsefulUrl,
                data: {
                    ComId: '576B68B3-DA3F-4FE5-9656-BC92E4DCDF72',
                    dtFrom: '01-Mar-2022',
                    dtTo: '25-Mar-2023',
                    EmpId: 0,
                    ShiftId: 0,
                    DesigId: 0,
                    DeptId: 0,
                    SectId: 0,
                    SubSectId: 0,
                    EmpTypeId: 0,
                    LineId: 0,
                    UnitId: 0,
                    FloorId: 0,
                    Type: 'Monthly Job Card Summary',
                    optCriteria: '=All=',
                    EmpStatus: '=ALL='
                }, 
                dataType: "json",
                type: "GET",
            });
        }






        var today = new Date();
        var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var year = today.getFullYear();
        var month = today.getMonth();
        var firstDay = '1-' + monthNames[month] + '-' + year;
        console.log("firstDay:::", firstDay);
        document.getElementById('from').value = firstDay;

        //var lastDay = new Date(year, month + 1, 0).getDate();
        var lastDay = '31-' + monthNames[month] + '-' + year;
        console.log("lastDay:::", lastDay);
        var formattedLastDay = lastDay + '-' + monthNames[month] + '-' + year;
        //document.getElementById('to').value = formattedLastDay;
        document.getElementById('to').value = lastDay;
    </script>

    <script>
        var emText;
        function data(empId) {
            emText = Number(empId);
        }
        var pageSize = $("#page-size").val();
        var prosstype = $("#prossType").val();
        var url;
        var search;
        function initJsGrid() {
            //var jsGridItemsDB = {
            //    loadData: function (filter) {
            //        pageSize: pageSize,
            //            url = '@Url.Action("GETEmpWiseSalaryLedgerList", "Payroll")' + '?pageIndex=' + filter.pageIndex + '&pageSize=' + filter.pageSize;


            //        url += '&prossType=' + $("#prossType").val();
            //        url += '&searchquery=' + JSON.stringify(filter);
            //        search = JSON.stringify(filter);
            //        console.log(filter);
            //        var d = $.Deferred();

            var jsGridItemsDB = {
                loadData: function (filter) {
                    pageSize: pageSize,
                        url = '@Url.Action("GETEmpWiseSalaryLedgerList", "Payroll")' + '?pageIndex=' + filter.pageIndex + '&pageSize=' + filter.pageSize;
                    //if ($("#search-text").val() != "") {
                    //    url += '&searchQuery=' + $("#search-text").val();
                    //}
                    if ($("#empID").val() != "") {
                        url += '&EmpId=' + emText;
                    }
                    if ($("#from").val() != "" && $("#to").val() != "") {
                        url += '&dtFrom=' + $("#from").val();
                        url += '&dtTo=' + $("#to").val();
                    }
                    url += '&searchquery=' + JSON.stringify(filter);
                    search = JSON.stringify(filter);
                    console.log(filter);
                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        url: url,
                        //data: { searchquery: JSON.stringify(filter) },
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    })
                        .done(function (result) {


                            console.log(result);
                            d.resolve(result);
                            //console.log(result.ProductList);

                        });


                    return d.promise().then(function (q) {

                        //console.log(q);
                        return {

                            data: q.EmployeeList,
                            itemsCount: parseInt(q.PageInfo.TotalRecordCount)
                        }
                    });
                }

            }



            var child = [];
            //alert(globalPageSize);
            var serial = 0;

      
        }

        $("#page-size").on("change", function () {
            var newPageSize = $(this).val();
            $("#jsGrid").jsGrid("option", "pageSize", newPageSize);
            $("#jsGrid").jsGrid("loadData");
        });

        $("#prossType").on("change", function () {
            var newprosstype = $(this).val();
            $("#jsGrid").jsGrid("option", "prossType", newprosstype);
            $("#jsGrid").jsGrid("loadData");
        });

        function filterItemTemplate() {
            $("#jsGrid").jsGrid("loadData");
        }

        function sendData() {
            $("#jsGrid").jsGrid("loadData");
        }

        function handleClick() {
            $("#jsGrid").jsGrid("loadData");
        }

        initJsGrid();

        // function downloadExcel() {
        //     var url = '@Url.Action("GetEmployeesSalaryLedgerAll", "Payroll")' + '?';
        //     if ($("#empID").val() != "") {
        //         url += '&EmpId=' + emText;
        //     }
        //     if ($("#from").val() != "" && $("#to").val() != "") {
        //         url += '&dtFrom=' + $("#from").val();
        //         url += '&dtTo=' + $("#to").val();
        //     }
        //     url += '&searchquery=' + search;
        //     $.ajax({
        //         url: url,
        //         method: 'GET',
        //         async: false,
        //         success: function (response) {
        //             console.log(response);
        //             if (response.Success === 1) {
        //                 const data = response.EmployeeList;

        //                 // Convert the data to an Excel file using a library like SheetJS
        //                 const workbook = XLSX.utils.book_new();
        //                 const sheet = XLSX.utils.json_to_sheet(data);
        //                 XLSX.utils.book_append_sheet(workbook, sheet, 'Sheet1');
        //                 const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
        //                 const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        //                 const url = window.URL.createObjectURL(blob);

        //                 // Create a temporary link to download the file
        //                 const link = document.createElement('a');
        //                 link.href = url;
        //                 link.download = 'data.xlsx';
        //                 document.body.appendChild(link);
        //                 link.click();
        //                 document.body.removeChild(link);
        //             } else {
        //                 console.log('Error: ' + response.error);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             console.log('AJAX request failed:', error);
        //         }
        //     });
        // }

        // function downloadPDF() {
        //     var url = '@Url.Action("GetEmployeesSalaryLedgerAll", "Payroll")' + '?';
        //     if ($("#empID").val() != "") {
        //         url += '&EmpId=' + emText;
        //     }
        //     if ($("#from").val() != "" && $("#to").val() != "") {
        //         url += '&dtFrom=' + $("#from").val();
        //         url += '&dtTo=' + $("#to").val();
        //     }
        //     url += '&searchquery=' + search;

        //     $.ajax({
        //         url: url,
        //         method: 'POST',
        //         success: function (response) {
        //             if (response.Success === 1) {
        //                 const data = response.EmployeeList;

        //                 // Define the PDF document structure
        //                 var docDefinition = {
        //                     content: [
        //                         { text: 'Salary Data', style: 'header' },
        //                         { text: '\n' },
        //                         {
        //                             table: {
        //                                 headerRows: 1,
        //                                 widths: ['*', '*', '*', '*', '*'/*, '*', '*', '*', '*', '*', '*', '*'*/],
        //                                 body: [
        //                                     ['Employee Code', 'Employee Name', 'Join Date', 'Designation', 'Net Salary Payable'/*, 'Section', 'Department', 'Mobile', 'Punch Date', 'Punch Time', 'Latitude', 'Longitude'*/],
        //                                     ...data.map(employee => [
        //                                         employee.EmpCode,
        //                                         employee.EmpName,
        //                                         formatDate(employee.DtJoin),
        //                                         employee.DesigName,
        //                                         employee.NetSalaryPayable
        //                                         //employee.SectName,
        //                                         //employee.DeptName,
        //                                         //employee.Mobile,
        //                                         //formatDate(employee.DtPunchDate),
        //                                         //formatTime(employee.DtPunchTime),
        //                                         //employee.Latitude,
        //                                         //employee.Longitude
        //                                     ])
        //                                 ]
        //                             }
        //                         }
        //                     ],
        //                     styles: {
        //                         header: {
        //                             fontSize: 18,
        //                             bold: true,
        //                             alignment: 'center',
        //                             margin: [0, 0, 0, 10]
        //                         }
        //                     }
        //                 };

        //                 // Format date in desired format
        //                 function formatDate(date) {
        //                     return moment(date).format('DD-MMM-YYYY');
        //                 }

        //                 // Format time in desired format
        //                 function formatTime(time) {
        //                     return moment(time).format('hh:mm:ss A');
        //                 }

        //                 // Generate the PDF
        //                 var pdfDocGenerator = pdfMake.createPdf(docDefinition);
        //                 pdfDocGenerator.download('Salary_data.pdf');
        //             } else {
        //                 console.log('Error: ' + response.error);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             console.log('AJAX request failed:', error);
        //         }
        //     });
        // }


    </script>

    <script>
        $(function () {
           var currentDate = new Date();
           var formattedDate = formatDate(currentDate);
           $("#from").val(formattedDate);
           $("#to").val(formattedDate);
        });

        function formatDate(date) {
            var months = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();

            var formattedDate = day + "-" + months[monthIndex] + "-" + year;

            return formattedDate;
        }
    </script>
    <script>
        $('#select1').on('change', function () {
            var period = $(this).val();
            setDateRange(period);
        });

        function setDateRange(period) {
            var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
                "Aug", "Sep", "Oct", "Nov", "Dec"];

            if (period == "This Week") {
                let d = new Date();
                let d2 = new Date();
                const daysToSaturday = 6 - d.getDay(); // days remaining until Saturday
                d2.setDate(d2.getDate() + daysToSaturday - 7); // set to Saturday
                d.setDate(d2.getDate() + 5); // set to Friday

                let currentdate = d;
                let today = d2;
                let finaldateformat = currentdate.getDate() + "-" + months[currentdate.getMonth()] + "-" + currentdate.getFullYear();
                let finaldateformat2 = today.getDate() + "-" + months[today.getMonth()] + "-" + today.getFullYear();

                $("#from").val(finaldateformat2);
                $("#to").val(finaldateformat);
            }


            else if (period == "This Month") {
                let d = new Date(), y = d.getFullYear(), m = d.getMonth();
                let firstDay = new Date(y, m, 1)
                let lastDay = new Date(y, m + 1, 0);
                d.setDate(d.getDate());

                let finaldateformat = firstDay.getDate() + "-" + months[firstDay.getMonth()] + "-" + firstDay.getFullYear();
                let finaldateformat2 = lastDay.getDate() + "-" + months[lastDay.getMonth()] + "-" + lastDay.getFullYear();

                $("#from").val(finaldateformat);
                $("#to").val(finaldateformat2);
            }

            else if (period == "This Year") {
                let d = new Date(),
                    y = d.getFullYear();
                let firstDay = new Date(y, 0, 1);
                let lastDay = new Date(y, 11, 31); // set last day to 31-Dec-2023
                d.setDate(d.getDate());

                let finaldateformat = firstDay.getDate() + "-" + months[firstDay.getMonth()] + "-" + firstDay.getFullYear();
                let finaldateformat2 = lastDay.getDate() + "-" + months[lastDay.getMonth()] + "-" + lastDay.getFullYear();

                $("#from").val(finaldateformat);
                $("#to").val(finaldateformat2);

            }

            else if (period == "Prev Month") {
                let d = new Date();
                let y = d.getFullYear();
                let m = d.getMonth() - 1;
                if (m < 0) {
                    m = 11;
                    y--;
                }
                let firstDay = new Date(y, m, 1);
                let lastDay = new Date(y, m + 1, 0); // set previous to 1-mar to 31-mar

                let finaldateformat = firstDay.getDate() + "-" + months[firstDay.getMonth()] + "-" + firstDay.getFullYear();
                let finaldateformat2 = lastDay.getDate() + "-" + months[lastDay.getMonth()] + "-" + lastDay.getFullYear();

                $("#from").val(finaldateformat);
                $("#to").val(finaldateformat2);


            }

            else if (period == "Prev Quarter") {
                let d = new Date();
                let y = d.getFullYear();
                let m = d.getMonth();
                let q = Math.floor(m / 3) - 1;
                if (q < 0) {
                    q = 3 + q;
                    y--;
                }
                let firstDay = new Date(y, q * 3, 1);
                let lastDay = new Date(y, q * 3 + 3, 0);

                let finaldateformat = firstDay.getDate() + "-" + months[firstDay.getMonth()] + "-" + firstDay.getFullYear();
                let finaldateformat2 = lastDay.getDate() + "-" + months[lastDay.getMonth()] + "-" + lastDay.getFullYear();

                $("#from").val(finaldateformat);
                $("#to").val(finaldateformat2);
            }

            else if (period == "Prev 6 Month") {
                let d = new Date();
                let sixMonthsAgo = new Date(d.getFullYear(), d.getMonth() - 6, 1);
                let firstDay = new Date(sixMonthsAgo.getFullYear(), sixMonthsAgo.getMonth(), 1);
                let lastDay = new Date(d.getFullYear(), d.getMonth(), 0);

                let finaldateformat = firstDay.getDate() + "-" + months[firstDay.getMonth()] + "-" + firstDay.getFullYear();
                let finaldateformat2 = lastDay.getDate() + "-" + months[lastDay.getMonth()] + "-" + lastDay.getFullYear();

                $("#from").val(finaldateformat);
                $("#to").val(finaldateformat2);

            }

            else if (period == "Prev Year") {
                let d = new Date();
                let y = d.getFullYear() - 1; // subtract 1 from the current year to get the previous year
                let firstDay = new Date(y, 0, 1); // set first day to 1-Jan of previous year
                let lastDay = new Date(y, 11, 31); // set last day to 31-Dec of previous year

                let finaldateformat = firstDay.getDate() + "-" + months[firstDay.getMonth()] + "-" + firstDay.getFullYear();
                let finaldateformat2 = lastDay.getDate() + "-" + months[lastDay.getMonth()] + "-" + lastDay.getFullYear();

                $("#from").val(finaldateformat);
                $("#to").val(finaldateformat2);


            }
        }
    </script>
    <script>
   

        // $(document).ready(function () {
        //     var table;
        //     columns = [

        //         // { title: "ComName", field: "ComName", sorter: "number", headerFilter: "input", width:250 },
        //         { title: "EmpCode", field: "EmpCode", sorter: "number", headerFilter: "input", width: 250 },
        //         { title: "EmpName", field: "EmpName", headerFilter: "input", width: 150, hozAlign: "left" },
            

        //         { title: "Department", field: "DeptName", headerFilter: "input", width: 180 },
        //         { title: "Section", field: "SectName", headerFilter: "input", width: 180 },
        //         { title: "Designation", field: "DesigName", headerFilter: "input", width: 150, hozAlign: "left" },
        //         { title: "EmpType", field: "EmpType", headerFilter: "input", width: 150, hozAlign: "left" },
        //         { title: "Floor", field: "Floor", headerFilter: "input", width: 150, hozAlign: "left" },
        //         { title: "Line", field: "Line", headerFilter: "input", width: 150, hozAlign: "left" },
        //         { title: "Joining Date", field: "dtJoin", headerFilter: "input", width: 120, sorter: "date", editorParams: { format: "dd/MM/yyyy" } },
        //         { title: "Punch Date", field: "dtPunchDate", headerFilter: "input", width: 150 },
        //         { title: "Status", field: "Status", headerFilter: "input", width: 110 },

        //         { title: "Time In", field: "TimeIn", headerFilter: "input", width: 150 },
        //         { title: "TimeOut", field: "TimeOut", headerFilter: "input", width: 150 },
        //         { title: "Regular OT Hr", field: "RegHour", headerFilter: "input", width: 150, bottomCalc: "sum", },
        //         { title: "OT Hour", field: "OTHour", headerFilter: "input", width: 110, bottomCalc: "sum", },
        //        { title: "OT Amount", field: "OTAmount", headerFilter: "input", width: 180, bottomCalc: "sum", },
        //         // { title: "Status", field: "Status", headerFilter: "input", width: 110 },

        //         // { title: "Caption", field: "Caption", headerFilter: "input", width: 120 },
        //         // { title: "Morning OT Hr", field: "MorOT", headerFilter: "input", width: 120 },


        //     ];

        //     table = new Tabulator("#example-table", {
        //         layout: "fitColumns",
        //         addRowPos: "bottom",
        //         pagination: "remote",
        //         paginationSize: 21,
        //         selectable: true,
        //         columns: columns
        //     });
        //     loadJobCardReport();

        //     function loadJobCardReport() {
        //         var duration = $("#select1").val();
        //         // var fromDate = $("#from").val();
        //         // var toDate = $("#to").val();

        //         var url = '@Url.Action("JobCardReportData", "HRReport")' + '?';
        //         if ($("#from").val() != "" && $("#to").val() != "") {
        //             url += '&From=' + $("#from").val();
        //             url += '&To=' + $("#to").val();
        //         }
        //         url += '&empID=' + emText;
        //         url += '&searchquery=' + search;
        //         let empId = $("#empID").val();
        //     // console.log(empId);

        //         let fromDate = $("#from").val();
        //         let toDate = $("#to").val();
        //         $.ajax({
        //             url: url,
        //             method: 'GET',
        //             dataType: 'json',
        //             data: {
        //                 EmpId: empId,
        //                 dtFrom: fromDate,
        //                 dtTo: toDate
        //             },
        //             success: function (response) {
        //                 console.log(response.data);
        //                 if (response.Success === 1) {

        //                     table = new Tabulator("#example-table", {
        //                         layout: "fitColumns",
        //                         addRowPos: "bottom",
        //                         pagination: "remote",
        //                         paginationCounter: "rows",
        //                         paginationSize: 10,
        //                         paginationSizeSelector: [10, 15, 25, 30],
        //                         selectable: true,
        //                         data: response.data,
        //                         columns: columns



        //                     });
                           

        //                     var model = response.data;

                          
        //                 }

        //             },
        //             error: function (xhr, status, error) {
        //             }
        //         });
        //     }
        //     // $("#select1, #from, #to, #empID").on("change", loadJobCardReport);

        //     // loadJobCardReport();

   
        //     $("#btnLaod").on("click", function () {
        //         loadJobCardReport();
        //         // alert("The paragraph was clicked.");
        //     })
        //     document.getElementById("download-pdf").addEventListener("click", function () {
        //         table.download("pdf", "JobCardReportData.pdf", {
        //             orientation: "landscape", 
        //             width:12,
        //             title: "Job Card Report Data", //add title to report
        //         });
        //     });

        //     document.getElementById("download-btn").addEventListener("click", function () {
        //         table.download("xlsx", "JobCardReportData.xlsx", { sheetName: "Job Card Report Data" });
        //     });

        //     document.getElementById("download-btns").addEventListener("click", function () {
        //         table.download("csv", "JobCardReportData.csv");
        //     });



        // });

        $(document).ready(function () {
            var table;

            columns = [

                        // { title: "ComName", field: "ComName", sorter: "number", headerFilter: "input", width:250 },
                        { title: "EmpCode", field: "EmpCode", sorter: "number", headerFilter: "input", width: 250 },
                        { title: "EmpName", field: "EmpName", headerFilter: "input", width: 150, hozAlign: "left" },


                        { title: "Department", field: "DeptName", headerFilter: "input", width: 180 },
                        { title: "Section", field: "SectName", headerFilter: "input", width: 180 },
                        { title: "Designation", field: "DesigName", headerFilter: "input", width: 150, hozAlign: "left" },
                        { title: "EmpType", field: "EmpType", headerFilter: "input", width: 150, hozAlign: "left" },
                        { title: "Floor", field: "Floor", headerFilter: "input", width: 150, hozAlign: "left" },
                        { title: "Line", field: "Line", headerFilter: "input", width: 150, hozAlign: "left" },
                        { title: "Joining Date", field: "dtJoin", headerFilter: "input", width: 120, sorter: "date", editorParams: { format: "dd/MM/yyyy" } },
                        { title: "Punch Date", field: "dtPunchDate", headerFilter: "input", width: 150 },
                        { title: "Status", field: "Status", headerFilter: "input", width: 110 },

                        { title: "Time In", field: "TimeIn", headerFilter: "input", width: 150 },
                        { title: "TimeOut", field: "TimeOut", headerFilter: "input", width: 150 },
                        { title: "Regular OT Hr", field: "RegHour", headerFilter: "input", width: 150, bottomCalc: "sum", },
                        { title: "OT Hour", field: "OTHour", headerFilter: "input", width: 110, bottomCalc: "sum", },
                       { title: "OT Amount", field: "OTAmount", headerFilter: "input", width: 180, bottomCalc: "sum", },
                        // { title: "Status", field: "Status", headerFilter: "input", width: 110 },

                        // { title: "Caption", field: "Caption", headerFilter: "input", width: 120 },
                        // { title: "Morning OT Hr", field: "MorOT", headerFilter: "input", width: 120 },


                    ];

            // columns = [
            //     { title: "EmpCode", field: "EmpCode", sorter: "number", headerFilter: "input", width: 250 },
            //     { title: "EmpName", field: "EmpName", headerFilter: "input", width: 150, hozAlign: "left" },
            //     { title: "Department", field: "DeptName", headerFilter: "input", width: 180 },
            //     { title: "Section", field: "SectName", headerFilter: "input", width: 180 },
            //     { title: "Designation", field: "DesigName", headerFilter: "input", width: 150, hozAlign: "left" },
            //     { title: "EmpType", field: "EmpType", headerFilter: "input", width: 150, hozAlign: "left" },
            //     { title: "Floor", field: "Floor", headerFilter: "input", width: 150, hozAlign: "left" },
            //     { title: "Line", field: "Line", headerFilter: "input", width: 150, hozAlign: "left" },
            //     { title: "Joining Date", field: "dtJoin", headerFilter: "input", width: 120, sorter: "date", editorParams: { format: "dd/MM/yyyy" } },
            //     { title: "Punch Date", field: "dtPunchDate", headerFilter: "input", width: 150 },
            //     { title: "Status", field: "Status", headerFilter: "input", width: 110 },
            //     { title: "Time In", field: "TimeIn", headerFilter: "input", width: 150 },
            //     { title: "TimeOut", field: "TimeOut", headerFilter: "input", width: 150 },
            //     { title: "Regular OT Hr", field: "RegHour", headerFilter: "input", width: 150, bottomCalc: "sum" },
            //     { title: "OT Hour", field: "OTHour", headerFilter: "input", width: 110, bottomCalc: "sum" },
            //     { title: "OT Amount", field: "OTAmount", headerFilter: "input", width: 180, bottomCalc: "sum" }
            // ];

            table = new Tabulator("#example-table", {
                layout: "fitColumns",
                addRowPos: "bottom",
                pagination: "remote",
                paginationSize: 21,
                selectable: true,
                columns: columns
            });

            function updateFilter() {
                var filters = [];

                $(".filter-option").each(function () {
                    var filterField = $(this).find(".filter-field").val();
                    var filterType = $(this).find(".filter-type").val();
                    var filterValue = $(this).find(".filter-value").val();

                    if (filterField) {
                        filters.push({ field: filterField, type: filterType, value: filterValue });
                    }
                });

                // Apply filters to the table
                table.setFilter(filters);
            }

            // Function to clear filters
            function clearFilter() {
                $(".filter-field").val("");
                $(".filter-type").val("=");
                $(".filter-value").val("");

                table.clearFilter();
            }

            // Event listener for filter change
            $(".card-body").on("change keyup", ".filter-field, .filter-type, .filter-value", updateFilter);

            // Add event listener for Load button
            $("#btnLoad").on("click", function () {
                loadJobCardReport();
            });

            // Add event listener for Clear Filter button
            $("#filter-clear").on("click", function () {
                clearFilter();
            });

            // Load data
            loadJobCardReport();

            function loadJobCardReport() {
                var empId = $("#empID").val();
                var fromDate = $("#from").val();
                var toDate = $("#to").val();
                var filterParams = {};

                // Get filter values for all columns
                $(".filter-option").each(function () {
                    var filterField = $(this).find(".filter-field").val();
                    var filterValue = $(this).find(".filter-value").val();
                    if (filterField && filterValue) {
                        filterParams[filterField] = filterValue;
                    }
                });

                $.ajax({
                    url: '@Url.Action("JobCardReportData", "HRReport")',
                    method: 'GET',
                    dataType: 'json',
                    data: {
                        EmpId: empId,
                        dtFrom: fromDate,
                        dtTo: toDate,
                        filterParams: filterParams // Pass filter parameters
                    },
                    success: function (response) {
                        console.log(response.data);
                        if (response.Success === 1) {
                            table.setData(response.data);
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle error
                    }
                });
            }

            // Add More button functionality
            $("#add-filter").click(function () {
                var newFilterOption = `
                <div class="filter-option row">
                    <div class="col">
                        <select class="form-control filter-field">
                            <option></option>
                            <option value="EmpCode">EmpCode</option>
                            <option value="EmpName">EmpName</option>
                            <option value="DeptName">Department</option>
                            <option value="SectName">Section</option>
                            <option value="DesigName">Designation</option>
                            <option value="EmpType">EmpType</option>
                            <option value="Floor">Floor</option>
                            <option value="Line">Line</option>
                            <option value="dtJoin">Joining Date</option>
                            <option value="dtPunchDate">Punch Date</option>
                            <option value="Status">Status</option>
                            <option value="TimeIn">Time In</option>
                            <option value="TimeOut">TimeOut</option>
                            <option value="RegHour">Regular OT Hr</option>
                            <option value="OTHour">OT Hour</option>
                            <option value="OTAmount">OT Amount</option>
                        </select>
                    </div>
                    <div class="col">
                        <select class="form-control filter-type">
                            <option value="=">=</option>
                            <option value="<"><</option>
                            <option value="<="><=</option>
                            <option value=">">></option>
                            <option value=">=">>=</option>
                            <option value="!=">!=</option>
                            <option value="like">like</option>
                        </select>
                    </div>
                    <div class="col">
                        <input type="text" class="form-control filter-value" placeholder="value to filter">
                    </div>
                                <div class="col">
                                <button class="btn remove-filter">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z" />
                                    </svg>
                                </button>

                            </div>

                </div>`;
                $(".card-body").append(newFilterOption);
            });

            // Remove button functionality
            $(".card-body").on("click", ".remove-filter", function () {
                $(this).closest(".filter-option").remove();
                updateFilter(); // Update filter after removing
            });

          
            // Clear Filter button functionality
            $("#filter-clear").on("click", function () {
                clearFilter(); // Clear all filters
            });
            // Add event listeners for filter inputs
            table.getColumns().forEach(function (column) {
                var field = column.getField();
                var headerFilterEl = column.getHeaderFilterElement();
                headerFilterEl.attr("id", "filter-value-" + field); // Add unique IDs to filter inputs
                headerFilterEl.on("keyup", function () {
                    loadJobCardReport();
                });
            });

            // Add event listener for Load button
            $("#btnLaod").on("click", function () {
                loadJobCardReport();
            });

            // Add event listeners for PDF, Excel, and CSV download buttons
            $("#download-pdf").on("click", function () {
                table.download("pdf", "JobCardReportData.pdf", {
                    orientation: "landscape",
                    width: 12,
                    title: "Job Card Report Data"
                });
            });

            $("#download-btn").on("click", function () {
                table.download("xlsx", "JobCardReportData.xlsx", { sheetName: "Job Card Report Data" });
            });

            $("#download-btns").on("click", function () {
                table.download("csv", "JobCardReportData.csv");
            });
        });

        

    </script>
    <script>
        $(function () {
            $("#empID").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "@Url.Action("SearchJobCardReport", "HRReport")",
                        dataType: "json",
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                minLength: 1,
                select: function (event, ui) {
                    $("#empID").val(ui.item.label);
                    data(ui.item.value);
                    return false;
                }
                // select: function (event, ui) {
                //     $("#empID").val(ui.item.label);

                //     // Update the Tabulator table with the selected value (assuming your Tabulator instance is named 'table')
                //     //table.setData('@Url.Action("JobCardReportData", "HRReport")' + '?empID=' + ui.item.value);

                //     return false;
                // }

            });

            $("#empID").on('keyup', function () {
                var value = $(this).val();
                if (value.trim() === "") {
                    data(0);
                    console.log("Input field is blank");
                } else {
                    // Input field is not blank
                    // Perform your logic here
                    console.log("Input field is not blank");
                }
            });
           

        });
    </script>
    <script>
        $(function () {
            var currentDate = new Date();
            var formattedDate = formatDate(currentDate);
            $("#from").val(formattedDate);
            $("#to").val(formattedDate);
        });

        function formatDate(date) {
            var months = [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];

            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();

            var formattedDate = day + "-" + months[monthIndex] + "-" + year;

            return formattedDate;
        }
    </script>
}